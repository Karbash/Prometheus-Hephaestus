<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hephaestus</name>
    </assembly>
    <members>
        <member name="T:Hephaestus.Controllers.AdditionalController">
            <summary>
            Controller para gerenciamento de adicionais (itens extras) para um tenant.
            Todas as opera��es requerem autentica��o com a role "Tenant".
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.#ctor(Hephaestus.Application.Interfaces.Additional.ICreateAdditionalUseCase,Hephaestus.Application.Interfaces.Additional.IGetAdditionalsUseCase,Hephaestus.Application.Interfaces.Additional.IGetAdditionalByIdUseCase,Hephaestus.Application.Interfaces.Additional.IUpdateAdditionalUseCase,Hephaestus.Application.Interfaces.Additional.IDeleteAdditionalUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AdditionalController})">
            <summary>
            Inicializa uma nova inst�ncia do <see cref="T:Hephaestus.Controllers.AdditionalController"/>.
            </summary>
            <param name="createAdditionalUseCase">Caso de uso para cria��o de adicionais.</param>
            <param name="getAdditionalsUseCase">Caso de uso para listagem de adicionais.</param>
            <param name="getAdditionalByIdUseCase">Caso de uso para obten��o de adicional por ID.</param>
            <param name="updateAdditionalUseCase">Caso de uso para atualiza��o de adicionais.</param>
            <param name="deleteAdditionalUseCase">Caso de uso para remo��o de adicionais.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.CreateAdditional(Hephaestus.Domain.DTOs.Request.CreateAdditionalRequest)">
            <summary>
            Cria um novo adicional para o tenant autenticado.
            </summary>
            <remarks>
            Requer **Role: Tenant**.
            
            Exemplo de requisi��o:
            ```json
            {
              "name": "Bacon Crocante",
              "description": "Fatias crocantes de bacon",
              "price": 4.99,
              "isAvailable": true
            }
            ```
            
            Exemplo de resposta de sucesso (Status 201 Created):
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            
            Exemplo de erro de valida��o (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "One or more validation errors occurred.",
              "status": 400,
              "errors": {
                "Name": [
                  "O campo 'Name' � obrigat�rio."
                ]
              }
            }
            ```
            </remarks>
            <param name="request">Dados do adicional a ser criado.</param>
            <returns>Um `CreatedAtActionResult` contendo o ID do novo adicional.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.GetAdditionals(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os adicionais pertencentes ao tenant autenticado.
            </summary>
            <remarks>
            Requer **Role: Tenant**.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Queijo Extra",
                "description": "Adicional de queijo",
                "price": 3.50,
                "isAvailable": true
              },
              {
                "id": "a7b8c9d0-e1f2-3g4h-5i6j-7k8l9m0n1o2p",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Borda Recheada",
                "description": "Borda com cheddar e catupiry",
                "price": 8.00,
                "isAvailable": false
              }
            ]
            ```
            </remarks>
            <returns>Uma lista de objetos `AdditionalResponse`.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.GetAdditionalById(System.String)">
            <summary>
            Obt�m os detalhes de um adicional espec�fico pelo seu ID.
            </summary>
            <remarks>
            Requer **Role: Tenant**. O adicional deve pertencer ao tenant autenticado.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "name": "Queijo Extra",
              "description": "Adicional de queijo",
              "price": 3.50,
              "isAvailable": true
            }
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "message": "Adicional com ID 'xyz' n�o encontrado para o tenant."
            }
            ```
            </remarks>
            <param name="id">ID do adicional (GUID).</param>
            <returns>Um objeto `AdditionalResponse` contendo os detalhes do adicional.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.UpdateAdditional(System.String,Hephaestus.Domain.DTOs.Request.UpdateAdditionalRequest)">
            <summary>
            Atualiza as informa��es de um adicional existente.
            </summary>
            <remarks>
            Requer **Role: Tenant**. O adicional deve pertencer ao tenant autenticado.
            
            Exemplo de requisi��o:
            ```json
            {
              "name": "Bacon Premium",
              "description": "Fatias de bacon artesanal",
              "price": 6.50,
              "isAvailable": true
            }
            ```
            
            Exemplo de resposta de sucesso (Status 204 No Content):
            ```
            (Nenhum corpo de resposta)
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "message": "Adicional com ID 'xyz' n�o encontrado para o tenant."
            }
            ```
            </remarks>
            <param name="id">ID do adicional a ser atualizado (GUID).</param>
            <param name="request">Dados atualizados do adicional.</param>
            <returns>Um `NoContentResult` em caso de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.DeleteAdditional(System.String)">
            <summary>
            Remove um adicional existente.
            </summary>
            <remarks>
            Requer **Role: Tenant**. O adicional deve pertencer ao tenant autenticado.
            
            Exemplo de resposta de sucesso (Status 204 No Content):
            ```
            (Nenhum corpo de resposta)
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "message": "Adicional com ID 'xyz' n�o encontrado para o tenant."
            }
            ```
            </remarks>
            <param name="id">ID do adicional a ser removido (GUID).</param>
            <returns>Um `NoContentResult` em caso de sucesso.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.AdministrationController">
            <summary>
            Controller para gerenciamento administrativo de empresas, vendas e logs.
            Todas as opera��es requerem autentica��o com a role "Admin" e a policy "RequireMfa".
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.#ctor(Hephaestus.Application.Interfaces.Administration.IGetCompaniesUseCase,Hephaestus.Application.Interfaces.Administration.IUpdateCompanyUseCase,Hephaestus.Application.Interfaces.Administration.ISalesReportUseCase,Hephaestus.Application.Interfaces.Administration.IAuditLogUseCase,Hephaestus.Application.Interfaces.Administration.IGetCompaniesWithinRadiusUseCase,Hephaestus.Application.Interfaces.Promotion.IGetAllPromotionsAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalMenuItemAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalTagAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalCategoryAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalCustomerAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalCouponAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalOrderAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalOrderItemAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalAddressAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalAdditionalAdminUseCase,Hephaestus.Application.Interfaces.Administration.IGlobalReviewAdminUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AdministrationController})">
            <summary>
            Inicializa uma nova inst�ncia do <see cref="T:Hephaestus.Controllers.AdministrationController"/>.
            </summary>
            <param name="getCompaniesUseCase">Caso de uso para listar empresas.</param>
            <param name="updateCompanyUseCase">Caso de uso para atualizar empresas.</param>
            <param name="salesReportUseCase">Caso de uso para relat�rios de vendas.</param>
            <param name="auditLogUseCase">Caso de uso para logs de auditoria.</param>
            <param name="getCompaniesWithinRadiusUseCase">Caso de uso para buscar empresas dentro de um raio.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetCompanies(System.Nullable{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Lista todas as empresas registradas no sistema, com opes de filtro e paginao.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "items": [
                {
                  "id": "123e4567-e89b-12d3-a456-426614174001",
                  "name": "Empresa Exemplo",
                  "email": "exemplo@empresa.com",
                  "phoneNumber": "123456789",
                  "isEnabled": true,
                  "feeType": "Percentage",
                  "feeValue": 5.0,
                  "city": "S�o Paulo",
                  "neighborhood": "Vila Mariana",
                  "street": "Rua Exemplo",
                  "number": "123",
                  "latitude": -23.550520,
                  "longitude": -46.633308,
                  "slogan": "O melhor da cidade!",
                  "description": "Descri��o da empresa."
                }
              ],
              "totalCount": 1,
              "pageNumber": 1,
              "pageSize": 20
            }
            ```
            </remarks>
            <param name="isEnabled">Filtro opcional para empresas habilitadas (true) ou desabilitadas (false).</param>
            <param name="pageNumber">N�mero da p�gina a ser retornada (padr�o: 1).</param>
            <param name="pageSize">N�mero de itens por p�gina (padr�o: 20).</param>
            <returns>Uma lista paginada de objetos `CompanyResponse`.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.UpdateCompany(System.String,Hephaestus.Domain.DTOs.Request.UpdateCompanyRequest)">
            <summary>
            Atualiza as informa��es de uma empresa espec�fica.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            O `id` na URL deve corresponder ao `Id` no corpo da requisi��o.
            
            Exemplo de requisi��o:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Empresa Atualizada Ltda.",
              "email": "contato_novo@empresa.com",
              "phoneNumber": "998877665",
              "apiKey": "nova_api_key_xyz",
              "feeType": "Fixed",
              "feeValue": 2.50,
              "isEnabled": true,
              "city": "Rio de Janeiro",
              "neighborhood": "Botafogo",
              "street": "Rua Exemplo Nova",
              "number": "456",
              "latitude": -22.951916,
              "longitude": -43.210487,
              "slogan": "Inova��o a cada passo!",
              "description": "Empresa l�der em tecnologia."
            }
            ```
            
            Exemplo de resposta de sucesso (Status 204 No Content):
            ```
            (Nenhum corpo de resposta)
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "message": "Empresa com ID 'xyz' n�o encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da empresa a ser atualizada (GUID).</param>
            <param name="request">Objeto com os dados atualizados da empresa.</param>
            <returns>Um `NoContentResult` em caso de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetSalesReport(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Gera um relat�rio consolidado de vendas de todas as empresas, com filtros opcionais por data.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            As datas devem estar no formato ISO 8601 (ex: `2024-01-01`).
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "totalSales": 1000.00,
              "totalTransactions": 50,
              "averageTicket": 20.00,
              "byCompany": [
                {
                  "companyId": "123e4567-e89b-12d3-a456-426614174001",
                  "companyName": "Empresa Exemplo",
                  "totalSales": 500.00,
                  "totalTransactions": 25
                },
                {
                  "companyId": "a7b8c9d0-e1f2-3g4h-5i6j-7k8l9m0n1o2p",
                  "companyName": "Outra Empresa",
                  "totalSales": 500.00,
                  "totalTransactions": 25
                }
              ]
            }
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "message": "Data inicial n�o pode ser maior que a data final."
            }
            ```
            </remarks>
            <param name="startDate">Data inicial para filtrar as vendas (opcional, formato ISO 8601).</param>
            <param name="endDate">Data final para filtrar as vendas (opcional, formato ISO 8601).</param>
            <returns>Um objeto `SalesReportResponse` contendo o relat�rio de vendas.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAuditLogs(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Lista logs de auditoria de a��es administrativas.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            As datas devem estar no formato ISO 8601 (ex: `2024-01-01`).
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "userId": "456e7890-e89b-12d3-a456-426614174002",
                "action": "UpdateCompany",
                "entityId": "789e0123-e89b-12d3-a456-426614174003",
                "description": "Empresa 'XYZ Corp' atualizada com sucesso",
                "timestamp": "2024-07-14T15:30:00Z"
              }
            ]
            ```
            </remarks>
            <param name="startDate">Data inicial para filtrar logs (opcional, formato ISO 8601).</param>
            <param name="endDate">Data final para filtrar logs (opcional, formato ISO 8601).</param>
            <returns>Uma lista de objetos `AuditLogResponse`.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllPromotions(System.Nullable{System.Boolean},System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todas as promoções do sistema, com filtros opcionais por status, empresa, paginação e ordenação.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            </remarks>
            <param name="isActive">Filtro opcional para promoções ativas.</param>
            <param name="companyId">Filtro opcional por empresa.</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Itens por página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação.</param>
            <param name="sortOrder">Ordem (asc/desc).</param>
            <returns>Uma lista paginada de promoções.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllMenuItems(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os itens do cardápio do sistema, com filtros avançados, paginação e ordenação.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            </remarks>
            <param name="companyId">Filtro opcional por empresa.</param>
            <param name="tagIds">Filtro opcional por tags.</param>
            <param name="categoryIds">Filtro opcional por categorias.</param>
            <param name="maxPrice">Filtro opcional por preço máximo.</param>
            <param name="isAvailable">Filtro opcional por disponibilidade.</param>
            <param name="promotionActiveNow">Filtro por promoções ativas agora.</param>
            <param name="promotionDayOfWeek">Filtro por dia da semana da promoção.</param>
            <param name="promotionTime">Filtro por horário da promoção.</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Itens por página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação.</param>
            <param name="sortOrder">Ordem (asc/desc).</param>
            <returns>Uma lista paginada de itens do cardápio.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllTags(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todas as tags do sistema, com filtros por empresa, nome, paginação e ordenação.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            </remarks>
            <param name="companyId">Filtro opcional por empresa.</param>
            <param name="name">Filtro opcional por nome da tag.</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Itens por página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação.</param>
            <param name="sortOrder">Ordem (asc/desc).</param>
            <returns>Uma lista paginada de tags.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllCategories(System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todas as categorias do sistema, com filtros por empresa, nome, status, paginação e ordenação.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            </remarks>
            <param name="companyId">Filtro opcional por empresa.</param>
            <param name="name">Filtro opcional por nome da categoria.</param>
            <param name="isActive">Filtro opcional por status de ativação.</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Itens por página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação.</param>
            <param name="sortOrder">Ordem (asc/desc).</param>
            <returns>Uma lista paginada de categorias.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllCustomers(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os clientes do sistema, com filtros por empresa, nome, telefone, status, paginação e ordenação.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            </remarks>
            <param name="companyId">Filtro opcional por empresa.</param>
            <param name="name">Filtro opcional por nome do cliente.</param>
            <param name="phoneNumber">Filtro opcional por telefone.</param>
            <param name="isActive">Filtro opcional por status de ativação.</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Itens por página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação.</param>
            <param name="sortOrder">Ordem (asc/desc).</param>
            <returns>Uma lista paginada de clientes.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllCoupons(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os cupons do sistema, com filtros por empresa, código, telefone do cliente, status, paginação e ordenação.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            </remarks>
            <param name="companyId">Filtro opcional por empresa.</param>
            <param name="code">Filtro opcional por código do cupom.</param>
            <param name="customerPhoneNumber">Filtro opcional por telefone do cliente.</param>
            <param name="isActive">Filtro opcional por status de ativação.</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Itens por página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação.</param>
            <param name="sortOrder">Ordem (asc/desc).</param>
            <returns>Uma lista paginada de cupons.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllOrders(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os pedidos do sistema, sem restrição de tenant, com filtros avançados, paginação e ordenação.
            </summary>
            <remarks>
            Requer <b>Role: Admin</b> e <b>MFA validado</b>.<br/>
            Permite filtrar por empresa, cliente, telefone, status, datas, valor, etc.
            </remarks>
            <param name="companyId">ID da empresa (opcional).</param>
            <param name="customerId">ID do cliente (opcional).</param>
            <param name="customerPhoneNumber">Telefone do cliente (opcional).</param>
            <param name="status">Status do pedido (opcional).</param>
            <param name="paymentStatus">Status do pagamento (opcional).</param>
            <param name="dataInicial">Data inicial de criação (opcional).</param>
            <param name="dataFinal">Data final de criação (opcional).</param>
            <param name="valorMin">Valor mínimo do pedido (opcional).</param>
            <param name="valorMax">Valor máximo do pedido (opcional).</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Tamanho da página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação (opcional).</param>
            <param name="sortOrder">Ordem de ordenação (asc/desc, padrão: asc).</param>
            <returns>Lista paginada de pedidos.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllOrderItems(System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os itens de pedido do sistema, sem restrição de tenant, com filtros avançados, paginação e ordenação.
            </summary>
            <remarks>
            Requer <b>Role: Admin</b> e <b>MFA validado</b>.<br/>
            Permite filtrar por pedido, empresa, cliente, produto, datas, valor, etc.
            </remarks>
            <param name="orderId">ID do pedido (opcional).</param>
            <param name="companyId">ID da empresa (opcional).</param>
            <param name="customerId">ID do cliente (opcional).</param>
            <param name="menuItemId">ID do item do cardápio (opcional).</param>
            <param name="dataInicial">Data inicial de criação (opcional).</param>
            <param name="dataFinal">Data final de criação (opcional).</param>
            <param name="valorMin">Valor unitário mínimo (opcional).</param>
            <param name="valorMax">Valor unitário máximo (opcional).</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Tamanho da página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação (opcional).</param>
            <param name="sortOrder">Ordem de ordenação (asc/desc, padrão: asc).</param>
            <returns>Lista paginada de itens de pedido.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllAddresses(System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os endereços do sistema, sem restrição de tenant, com filtros avançados, paginação e ordenação.
            </summary>
            <remarks>
            Requer <b>Role: Admin</b> e <b>MFA validado</b>.<br/>
            Permite filtrar por entidade, tipo, cidade, estado, datas, etc.
            </remarks>
            <param name="entityId">ID da entidade (empresa ou cliente, opcional).</param>
            <param name="entityType">Tipo da entidade ("Company", "Customer", etc., opcional).</param>
            <param name="city">Cidade (opcional).</param>
            <param name="state">Estado (opcional).</param>
            <param name="type">Tipo do endereço (Principal, Entrega, etc., opcional).</param>
            <param name="dataInicial">Data inicial de criação (opcional).</param>
            <param name="dataFinal">Data final de criação (opcional).</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Tamanho da página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação (opcional).</param>
            <param name="sortOrder">Ordem de ordenação (asc/desc, padrão: asc).</param>
            <returns>Lista paginada de endereços.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllAdditionals(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todos os adicionais do sistema, sem restrição de tenant, com filtros avançados, paginação e ordenação.
            </summary>
            <remarks>
            Requer <b>Role: Admin</b> e <b>MFA validado</b>.<br/>
            Permite filtrar por empresa, nome, disponibilidade, preço, datas, etc.
            </remarks>
            <param name="tenantId">ID da empresa (opcional).</param>
            <param name="name">Nome do adicional (opcional).</param>
            <param name="isAvailable">Disponibilidade (opcional).</param>
            <param name="precoMin">Preço mínimo (opcional).</param>
            <param name="precoMax">Preço máximo (opcional).</param>
            <param name="dataInicial">Data inicial de criação (opcional).</param>
            <param name="dataFinal">Data final de criação (opcional).</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Tamanho da página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação (opcional).</param>
            <param name="sortOrder">Ordem de ordenação (asc/desc, padrão: asc).</param>
            <returns>Lista paginada de adicionais.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAllReviews(System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista todas as avaliações do sistema, sem restrição de tenant, com filtros avançados, paginação e ordenação.
            </summary>
            <remarks>
            Requer <b>Role: Admin</b> e <b>MFA validado</b>.<br/>
            Permite filtrar por empresa, cliente, pedido, nota, status, datas, etc.
            </remarks>
            <param name="companyId">ID da empresa (opcional).</param>
            <param name="customerId">ID do cliente (opcional).</param>
            <param name="orderId">ID do pedido (opcional).</param>
            <param name="ratingMin">Nota mínima (opcional).</param>
            <param name="ratingMax">Nota máxima (opcional).</param>
            <param name="isActive">Status de ativação (opcional).</param>
            <param name="dataInicial">Data inicial de criação (opcional).</param>
            <param name="dataFinal">Data final de criação (opcional).</param>
            <param name="pageNumber">Número da página (padrão: 1).</param>
            <param name="pageSize">Tamanho da página (padrão: 20).</param>
            <param name="sortBy">Campo de ordenação (opcional).</param>
            <param name="sortOrder">Ordem de ordenação (asc/desc, padrão: asc).</param>
            <returns>Lista paginada de avaliações.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hephaestus.Controllers.AdministrationController.GetCompaniesByRadius(System.Double,System.Double,System.Double,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)" -->
        <member name="T:Hephaestus.Controllers.AuthController">
            <summary>
            Controller para autenticação de usuários e gerenciamento de contas, incluindo login, registro de empresas, redefinição de senha e MFA.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.#ctor(Hephaestus.Application.Interfaces.Auth.ILoginUseCase,Hephaestus.Application.Interfaces.Auth.IRegisterCompanyUseCase,Hephaestus.Application.Interfaces.Auth.IResetPasswordUseCase,Hephaestus.Application.Interfaces.Auth.IMfaUseCase,Hephaestus.Domain.Services.ILoggedUserService,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AuthController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.AuthController"/>.
            </summary>
            <param name="loginUseCase">Caso de uso para login de usuários.</param>
            <param name="registerCompanyUseCase">Caso de uso para registro de novas empresas.</param>
            <param name="resetPasswordUseCase">Caso de uso para redefinição de senha.</param>
            <param name="mfaUseCase">Caso de uso para autenticação multifator (MFA).</param>
            <param name="loggedUserService">Serviço para obter informações do usuário logado.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.Login(Hephaestus.Domain.DTOs.Request.LoginRequest,System.String)">
            <summary>
            Autentica um usuário e retorna um token JWT.
            </summary>
            <remarks>
            Para administradores, um **código MFA** pode ser necessário se estiver configurado.
            
            Exemplo de requisição:
            ```json
            {
              "email": "usuario@exemplo.com",
              "password": "SenhaSegura123!"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            ```
            
            Exemplo de erro de credenciais inválidas (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "Credenciais inválidas."
            }
            ```
            Exemplo de erro MFA necessário (Status 401 Unauthorized):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
              "title": "Unauthorized",
              "status": 401,
              "detail": "Código MFA é necessário para este usuário."
            }
            ```
            </remarks>
            <param name="request">Dados de login: e-mail e senha.</param>
            <param name="mfaCode">Código MFA opcional, requerido para administradores com MFA ativo.</param>
            <returns>Um `OkResult` contendo o token JWT.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.Register(Hephaestus.Domain.DTOs.Request.RegisterCompanyRequest)">
            <summary>
            Registra uma nova empresa no sistema.
            </summary>
            <remarks>
            Requer **Role: Admin** e **MFA validado**.
            
            Exemplo de requisição:
            ```json
            {
              "companyName": "Nova Empresa SA",
              "email": "contato@novaempresa.com",
              "password": "SenhaForteEmpresa!",
              "phoneNumber": "11987654321",
              "city": "São Paulo",
              "neighborhood": "Centro",
              "street": "Rua das Flores",
              "number": "100"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "companyId": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            
            Exemplo de erro de validação (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "One or more validation errors occurred.",
              "status": 400,
              "errors": {
                "Email": [
                  "O formato do e-mail é inválido."
                ]
              }
            }
            ```
            Exemplo de erro de conflito (Status 409 Conflict):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)",
              "title": "Conflict",
              "status": 409,
              "detail": "E-mail 'contato@novaempresa.com' já registrado."
            }
            ```
            </remarks>
            <param name="request">Dados da empresa a ser registrada.</param>
            <returns>Um `OkResult` contendo o ID da empresa registrada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ResetPasswordRequest(Hephaestus.Domain.DTOs.Request.ResetPasswordRequest)">
            <summary>
            Solicita um token para iniciar o processo de redefinição de senha.
            </summary>
            <remarks>
            Um token será enviado para o **e-mail** ou **WhatsApp** do usuário.
            
            Exemplo de requisição:
            ```json
            {
              "email": "usuario@exemplo.com"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "message": "Um token de redefinição de senha foi enviado para seu e-mail/WhatsApp."
            }
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
              "title": "Not Found",
              "status": 404,
              "detail": "E-mail 'naoexistente@exemplo.com' não encontrado."
            }
            ```
            </remarks>
            <param name="request">E-mail do usuário que deseja redefinir a senha.</param>
            <returns>Um `OkResult` indicando que o token foi enviado.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ResetPassword(Hephaestus.Domain.DTOs.Request.ResetPasswordConfirmRequest)">
            <summary>
            Confirma a redefinição de senha utilizando o token recebido.
            </summary>
            <remarks>
            Exemplo de requisição:
            ```json
            {
              "email": "usuario@exemplo.com",
              "token": "ABC123XYZ",
              "newPassword": "NovaSenhaSegura456!"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```
            (Nenhum corpo de resposta, apenas status 200)
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "Token inválido ou expirado."
            }
            ```
            </remarks>
            <param name="request">E-mail do usuário, token de redefinição e a nova senha.</param>
            <returns>Um `OkResult` em caso de sucesso na redefinição.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.SetupMfa">
            <summary>
            Configura a autenticação multifator (MFA) para um usuário administrador.
            </summary>
            <remarks>
            Requer **Role: Admin**. Retorna um segredo **TOTP** que deve ser configurado em um aplicativo autenticador (e.g., Google Authenticator).
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "secret": "JBSWY3DPEHPK3PXP"
            }
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "MFA já configurado para este usuário."
            }
            ```
            </remarks>
            <returns>Um `OkResult` contendo o segredo TOTP.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ValidateMfa(Hephaestus.Domain.DTOs.Request.MfaRequest)">
            <summary>
            Valida um código MFA fornecido por um administrador e retorna um novo token JWT com a claim `MfaValidated`.
            </summary>
            <remarks>
            Requer **Role: Admin**.
            
            Exemplo de requisição:
            ```json
            {
              "email": "admin@exemplo.com",
              "mfaCode": "123456"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "Código MFA inválido."
            }
            ```
            </remarks>
            <param name="request">E-mail do administrador e o código MFA gerado pelo aplicativo autenticador.</param>
            <returns>Um `OkResult` contendo o novo token JWT.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.GetLoggedUser">
            <summary>
            Retorna os dados do usuário atualmente logado.
            </summary>
            <remarks>
            Requer autenticação (qualquer role).
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "userId": "dbe2b66a-1d5f-4a7b-8c9e-0f1a2b3c4d5e",
              "email": "usuario@exemplo.com",
              "roles": ["Tenant"],
              "isAuthenticated": true,
              "mfaValidated": false,
              "tenantId": "e1f2g3h4-i5j6-k7l8-m9n0-o1p2q3r4s5t6"
            }
            ```
            
            Exemplo de resposta para usuário não autenticado (Status 401 Unauthorized):
            ```
            (Nenhum corpo de resposta, apenas status 401)
            ```
            </remarks>
            <returns>Um objeto `LoggedUserResponse` com as informações do usuário.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.GetUserEmail">
            <summary>
            Obtém o e-mail do usuário do token de autenticação.
            </summary>
            <returns>O e-mail do usuário como string.</returns>
            <exception cref="T:System.UnauthorizedAccessException">Lançada se o e-mail não for encontrado no token.</exception>
        </member>
        <member name="T:Hephaestus.Controllers.CategoryController">
            <summary>
            Controller para gerenciamento de categorias de menu.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CategoryController.CreateCategory(Hephaestus.Domain.DTOs.Request.CreateCategoryRequest)">
             <summary>
             Cria uma nova categoria para o tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite que um tenant crie uma nova categoria para organizar seus itens de menu.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Request:**
             ```json
             {
               "name": "Bebidas",
               "description": "Categoria para todas as bebidas disponíveis",
               "isActive": true
             }
             ```
            
             **Exemplo de Response (Status 201 Created):**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001"
             }
             ```
             </remarks>
             <param name="request">Dados da categoria a ser criada.</param>
             <returns>ID da categoria criada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CategoryController.GetCategories(System.Int32,System.Int32,System.String,System.String)">
             <summary>
             Lista as categorias do tenant autenticado com paginação.
             </summary>
             <remarks>
             Este endpoint retorna uma lista paginada de categorias pertencentes ao tenant autenticado.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Response (Status 200 OK):**
             ```json
             {
               "items": [
                 {
                   "id": "123e4567-e89b-12d3-a456-426614174001",
                   "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                   "name": "Bebidas",
                   "description": "Categoria para todas as bebidas disponíveis",
                   "isActive": true,
                   "createdAt": "2024-01-01T12:00:00Z",
                   "updatedAt": "2024-01-01T12:00:00Z"
                 }
               ],
               "totalCount": 1,
               "pageNumber": 1,
               "pageSize": 20
             }
             ```
             </remarks>
             <param name="pageNumber">Número da página para paginação (padrão: 1).</param>
             <param name="pageSize">Número de itens por página para paginação (padrão: 20).</param>
             <returns>Lista paginada de categorias.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CategoryController.GetCategoryById(System.String)">
             <summary>
             Obtém uma categoria específica pelo seu ID.
             </summary>
             <remarks>
             Este endpoint retorna as informações detalhadas de uma categoria específica, desde que pertença ao tenant autenticado.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Response (Status 200 OK):**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001",
               "tenantId": "456e7890-e89b-12d3-a456-426614174002",
               "name": "Bebidas",
               "description": "Categoria para todas as bebidas disponíveis",
               "isActive": true,
               "createdAt": "2024-01-01T12:00:00Z",
               "updatedAt": "2024-01-01T12:00:00Z"
             }
             ```
             </remarks>
             <param name="id">ID da categoria a ser obtida.</param>
             <returns>Detalhes da categoria ou NotFound se não encontrada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CategoryController.UpdateCategory(System.String,Hephaestus.Domain.DTOs.Request.UpdateCategoryRequest)">
             <summary>
             Atualiza uma categoria existente.
             </summary>
             <remarks>
             Este endpoint permite que um tenant atualize uma categoria existente.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Request:**
             ```json
             {
               "name": "Bebidas Refrigerantes",
               "description": "Categoria para refrigerantes e bebidas geladas",
               "isActive": true
             }
             ```
             </remarks>
             <param name="id">ID da categoria a ser atualizada.</param>
             <param name="request">Dados atualizados da categoria.</param>
             <returns>Status 204 No Content em caso de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CategoryController.DeleteCategory(System.String)">
            <summary>
            Exclui uma categoria.
            </summary>
            <remarks>
            Este endpoint permite que um tenant exclua uma categoria existente.
            Requer autenticação com a role **Tenant**.
            </remarks>
            <param name="id">ID da categoria a ser excluída.</param>
            <returns>Status 204 No Content em caso de sucesso.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.CompanyController">
            <summary>
            Controller para gerenciamento de perfis de empresas, fornecendo endpoints para consulta de dados da empresa.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CompanyController.#ctor(Hephaestus.Application.Interfaces.Company.IGetCompanyProfileUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.CompanyController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.CompanyController"/>.
            </summary>
            <param name="getCompanyProfileUseCase">Caso de uso para obter o perfil da empresa.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.CompanyController.GetCompanyProfile(System.String)">
            <summary>
            Obtém o perfil completo de uma empresa específica.
            </summary>
            <remarks>
            Este endpoint retorna todas as informações detalhadas de uma empresa, incluindo seus dados de contato, endereço, slogan, descrição, imagens, horários de funcionamento e links de mídias sociais.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Restaurante Exemplo",
              "email": "contato@restaurante.com",
              "phoneNumber": "11987654321",
              "isEnabled": true,
              "feeType": "Percentage",
              "feeValue": 5.0,
              "state": "SP",
              "city": "São Paulo",
              "neighborhood": "Centro",
              "street": "Rua das Flores",
              "number": "123",
              "latitude": -23.5505,
              "longitude": -46.6333,
              "slogan": "A melhor comida da cidade!",
              "description": "Restaurante especializado em pratos tradicionais.",
              "images": [
                {
                  "id": "img1",
                  "url": "[https://example.com/image1.jpg](https://example.com/image1.jpg)",
                  "description": "Fachada do restaurante"
                }
              ],
              "operatingHours": [
                {
                  "dayOfWeek": 1,
                  "openTime": "08:00",
                  "closeTime": "22:00",
                  "isOpen": true
                }
              ],
              "socialMedia": [
                {
                  "platform": "Instagram",
                  "url": "[https://instagram.com/restaurante](https://instagram.com/restaurante)"
                }
              ]
            }
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
              "title": "Not Found",
              "status": 404,
              "detail": "Empresa com ID '99999999-9999-9999-9999-999999999999' não encontrada."
            }
            ```
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "O ID fornecido 'abc-123' não é um GUID válido."
            }
            ```
            </remarks>
            <param name="id">O **ID (GUID)** da empresa a ser consultada.</param>
            <returns>Um `OkResult` contendo o `CompanyProfileResponse` ou um `NotFoundResult` se a empresa não for encontrada.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.CouponController">
            <summary>
            Controller para gerenciamento de cupons, permitindo opera��es como cria��o, listagem, obten��o, atualiza��o e exclus�o de cupons.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.#ctor(Hephaestus.Application.Interfaces.Coupon.ICreateCouponUseCase,Hephaestus.Application.Interfaces.Coupon.IGetCouponsUseCase,Hephaestus.Application.Interfaces.Coupon.IGetCouponByIdUseCase,Hephaestus.Application.Interfaces.Coupon.IUpdateCouponUseCase,Hephaestus.Application.Interfaces.Coupon.IDeleteCouponUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.CouponController},Hephaestus.Domain.Repositories.ICouponRepository)">
            <summary>
            Inicializa uma nova inst�ncia do <see cref="T:Hephaestus.Controllers.CouponController"/>.
            </summary>
            <param name="createCouponUseCase">Caso de uso para criar cupons.</param>
            <param name="getCouponsUseCase">Caso de uso para listar cupons.</param>
            <param name="getCouponByIdUseCase">Caso de uso para obter um cupom por ID.</param>
            <param name="updateCouponUseCase">Caso de uso para atualizar um cupom.</param>
            <param name="deleteCouponUseCase">Caso de uso para deletar um cupom.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
            <param name="couponRepository">Reposit�rio para opera��es de cupom.</param>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.CreateCoupon(Hephaestus.Domain.DTOs.Request.CreateCouponRequest)">
            <summary>
            Cria um novo cupom para o tenant autenticado.
            </summary>
            <remarks>
            Este endpoint permite que um administrador ou um tenant crie um novo cupom de desconto.
            Requer autentica��o com as roles **Admin** ou **Tenant**.
            
            Exemplo de requisi��o:
            ```json
            {
              "code": "VERAO2025",
              "description": "Desconto especial de ver�o",
              "discountValue": 15.00,
              "isActive": true,
              "startDate": "2025-07-15T00:00:00Z",
              "endDate": "2025-09-30T23:59:59Z"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 201 Created):
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            
            Exemplo de erro de valida��o (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "One or more validation errors occurred.",
              "status": 400,
              "errors": {
                "Code": [
                  "O c�digo do cupom � obrigat�rio."
                ]
              }
            }
            ```
            Exemplo de erro de conflito (Status 409 Conflict):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)",
              "title": "Conflict",
              "status": 409,
              "detail": "O c�digo 'VERAO2025' j� existe para este tenant."
            }
            ```
            </remarks>
            <param name="request">Dados do cupom a ser criado.</param>
            <returns>Um `CreatedAtActionResult` contendo o ID do cupom criado.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.GetCoupons(System.Nullable{System.Boolean},System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista os cupons dispon�veis para o tenant autenticado, com filtros opcionais.
            </summary>
            <remarks>
            Este endpoint permite filtrar cupons por status de ativa��o (`isActive`) e pelo n�mero de telefone de um cliente associado (`customerPhoneNumber`).
            Requer autentica��o com as roles **Admin** ou **Tenant**.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "code": "DESCONTO10",
                "description": "10% de desconto",
                "discountValue": 10.00,
                "isActive": true,
                "startDate": "2025-07-14T00:00:00Z",
                "endDate": "2025-12-31T23:59:59Z"
              },
              {
                "id": "a1b2c3d4-e5f6-7g8h-9i0j-k1l2m3n4o5p6",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "code": "FRETEGRATIS",
                "description": "Frete Gr�tis na primeira compra",
                "discountValue": 0.00,
                "isActive": false,
                "startDate": "2025-06-01T00:00:00Z",
                "endDate": "2025-06-30T23:59:59Z"
              }
            ]
            ```
            Exemplo de erro de autentica��o (Status 401 Unauthorized):
            ```
            (Nenhum corpo de resposta, apenas status 401)
            ```
            </remarks>
            <param name="isActive">Filtro opcional para listar apenas cupons ativos ou inativos.</param>
            <param name="customerPhoneNumber">Filtro opcional para listar cupons associados a um n�mero de telefone de cliente espec�fico.</param>
            <returns>Uma `OkResult` contendo uma lista de `CouponResponse`.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.GetCouponById(System.String)">
            <summary>
            Obt�m os detalhes de um cupom espec�fico por seu ID.
            </summary>
            <remarks>
            Este endpoint retorna todas as informa��es de um cupom, desde que perten�a ao tenant autenticado.
            Requer autentica��o com as roles **Admin** ou **Tenant**.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "code": "DESCONTO10",
              "description": "10% de desconto",
              "discountValue": 10.00,
              "isActive": true,
              "startDate": "2025-07-14T00:00:00Z",
              "endDate": "2025-12-31T23:59:59Z"
            }
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "O ID do cupom 'invalido-id' n�o � um GUID v�lido."
            }
            ```
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
              "title": "Not Found",
              "status": 404,
              "detail": "Cupom com ID '99999999-9999-9999-9999-999999999999' n�o encontrado para o tenant."
            }
            ```
            </remarks>
            <param name="id">O **ID (GUID)** do cupom a ser consultado.</param>
            <returns>Um `OkResult` contendo o `CouponResponse` ou um `NotFoundResult` se o cupom n�o for encontrado.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.UpdateCoupon(System.String,Hephaestus.Domain.DTOs.Request.UpdateCouponRequest)">
            <summary>
            Atualiza um cupom existente para o tenant autenticado.
            </summary>
            <remarks>
            Permite a modifica��o das propriedades de um cupom existente.
            Requer autentica��o com as roles **Admin** ou **Tenant**.
            
            Exemplo de requisi��o:
            ```json
            {
              "code": "SUPERDESCONTO20",
              "description": "20% de desconto em toda a loja",
              "discountValue": 20.00,
              "isActive": true,
              "startDate": "2025-07-14T00:00:00Z",
              "endDate": "2026-01-31T23:59:59Z"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 204 No Content):
            ```
            (Nenhum corpo de resposta, apenas status 204)
            ```
            
            Exemplo de erro de valida��o (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "One or more validation errors occurred.",
              "status": 400,
              "errors": {
                "DiscountValue": [
                  "O valor de desconto deve ser maior que zero."
                ]
              }
            }
            ```
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
              "title": "Not Found",
              "status": 404,
              "detail": "Cupom com ID '99999999-9999-9999-9999-999999999999' n�o encontrado para atualiza��o."
            }
            ```
            Exemplo de erro de conflito (Status 409 Conflict):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)",
              "title": "Conflict",
              "status": 409,
              "detail": "O c�digo de cupom 'SUPERDESCONTO20' j� est� em uso por outro cupom."
            }
            ```
            </remarks>
            <param name="id">O **ID (GUID)** do cupom a ser atualizado.</param>
            <param name="request">Dados atualizados do cupom.</param>
            <returns>Um `NoContentResult` em caso de sucesso na atualiza��o.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.UpdateCouponStatus(System.String,Hephaestus.Domain.DTOs.Request.UpdateCouponStatusRequest)">
            <summary>
            Atualiza o status de ativa��o de um cupom (ativo/inativo).
            </summary>
            <param name="id">ID do cupom.</param>
            <param name="request">Novo status de ativa��o.</param>
            <returns>Cupom atualizado.</returns>
            <response code="200">Status atualizado com sucesso.</response>
            <response code="400">Regras de neg�cio violadas.</response>
            <response code="404">Cupom n�o encontrado.</response>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.UseCoupon(System.String,Hephaestus.Domain.DTOs.Request.UseCouponRequest)">
            <summary>
            Registra o uso de um cupom por um cliente em um pedido.
            </summary>
            <param name="id">ID do cupom.</param>
            <param name="request">Dados do uso (cliente, pedido).</param>
            <returns>Confirma��o do uso.</returns>
            <response code="200">Uso registrado com sucesso.</response>
            <response code="400">Limite de uso atingido ou cupom inv�lido.</response>
        </member>
        <member name="M:Hephaestus.Controllers.CouponController.DeleteCoupon(System.String)">
            <summary>
            Remove um cupom do tenant autenticado.
            </summary>
            <remarks>
            Este endpoint permite que um administrador ou um tenant remova um cupom existente.
            Requer autentica��o com as roles **Admin** ou **Tenant**.
            
            Exemplo de resposta de sucesso (Status 204 No Content):
            ```
            (Nenhum corpo de resposta, apenas status 204)
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "O ID do cupom 'invalido-id' n�o � um GUID v�lido."
            }
            ```
            
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
              "title": "Not Found",
              "status": 404,
              "detail": "Cupom com ID '99999999-9999-9999-9999-999999999999' n�o encontrado para o tenant."
            }
            ```
            
            Exemplo de erro de conflito (Status 409 Conflict):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)",
              "title": "Conflict",
              "status": 409,
              "detail": "N�o � poss�vel remover um cupom que est� sendo usado em pedidos ativos."
            }
            ```
            </remarks>
            <param name="id">O **ID (GUID)** do cupom a ser removido.</param>
            <returns>Um `NoContentResult` em caso de sucesso.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.CustomerController">
            <summary>
            Controller para gerenciamento de clientes, permitindo operações como atualização, cadastro e consulta de clientes.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.#ctor(Hephaestus.Application.Interfaces.Customer.IUpdateCustomerUseCase,Hephaestus.Application.Interfaces.Customer.IGetCustomerUseCase,Hephaestus.Application.Interfaces.Customer.IGetByIdCustomerUseCase,Hephaestus.Application.Interfaces.Administration.IAuditLogUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.CustomerController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.CustomerController"/>.
            </summary>
            <param name="updateCustomerUseCase">Caso de uso para atualizar ou cadastrar clientes.</param>
            <param name="getCustomerUseCase">Caso de uso para listar clientes.</param>
            <param name="getByIdCustomerUseCase">Caso de uso para obter um cliente por ID.</param>
            <param name="auditLogUseCase">Caso de uso para registrar logs de auditoria.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.UpdateCustomer(Hephaestus.Domain.DTOs.Request.CustomerRequest)">
            <summary>
            Atualiza ou cadastra um cliente com base no número de telefone.
            </summary>
            <remarks>
            Este endpoint permite que um administrador ou um tenant atualize as informações de um cliente existente ou cadastre um novo cliente se o número de telefone não for encontrado.
            Requer autenticação com as roles **Admin** ou **Tenant**.
            
            Exemplo de requisição:
            ```json
            {
              "phoneNumber": "11998877665",
              "name": "Maria Oliveira",
              "state": "MG",
              "city": "Belo Horizonte",
              "street": "Avenida Afonso Pena",
              "number": "500",
              "latitude": -19.9208,
              "longitude": -43.9378
            }
            ```
            
            Exemplo de resposta de sucesso (Status 204 No Content):
            ```
            (Nenhum corpo de resposta, apenas status 204)
            ```
            
            Exemplo de erro de validação (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "One or more validation errors occurred.",
              "status": 400,
              "errors": {
                "PhoneNumber": [
                  "O número de telefone é inválido."
                ]
              }
            }
            ```
            Exemplo de erro de autenticação (Status 401 Unauthorized):
            ```
            (Nenhum corpo de resposta, apenas status 401)
            ```
            </remarks>
            <param name="request">Dados do cliente a serem atualizados ou cadastrados.</param>
            <returns>Um `NoContentResult` indicando o sucesso da operação.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetCustomers(System.String,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Lista clientes do tenant, com opções de filtro e paginação.
            </summary>
            <remarks>
            Este endpoint retorna uma lista paginada de clientes pertencentes ao tenant autenticado. É possível filtrar a lista por número de telefone.
            Requer autenticação com as roles **Admin** ou **Tenant**.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "items": [
                {
                  "id": "123e4567-e89b-12d3-a456-426614174001",
                  "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                  "phoneNumber": "11987654321",
                  "name": "João Silva",
                  "state": "SP",
                  "city": "São Paulo",
                  "street": "Rua das Flores",
                  "number": "123",
                  "latitude": -23.5505,
                  "longitude": -46.6333,
                  "createdAt": "2025-07-14T12:00:00Z"
                },
                {
                  "id": "a9b8c7d6-e5f4-3g2h-1i0j-k9l8m7n6o5p4",
                  "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                  "phoneNumber": "21991122334",
                  "name": "Ana Souza",
                  "state": "RJ",
                  "city": "Rio de Janeiro",
                  "street": "Rua Copacabana",
                  "number": "456",
                  "latitude": -22.9710,
                  "longitude": -43.1820,
                  "createdAt": "2025-07-13T10:30:00Z"
                }
              ],
              "totalCount": 2,
              "pageNumber": 1,
              "pageSize": 20
            }
            ```
            Exemplo de erro de autenticação (Status 401 Unauthorized):
            ```
            (Nenhum corpo de resposta, apenas status 401)
            ```
            </remarks>
            <param name="phoneNumber">Filtro opcional: número de telefone do cliente.</param>
            <param name="pageNumber">Número da página para paginação (padrão: 1).</param>
            <param name="pageSize">Tamanho da página para paginação (padrão: 20).</param>
            <returns>Um `OkResult` contendo uma lista paginada de `CustomerResponse`.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetCustomerById(System.String)">
            <summary>
            Obtém os detalhes de um cliente específico por seu ID.
            </summary>
            <remarks>
            Este endpoint retorna todas as informações de um cliente, desde que o cliente pertença ao tenant autenticado.
            Requer autenticação com as roles **Admin** ou **Tenant**.
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "phoneNumber": "11987654321",
              "name": "João Silva",
              "state": "SP",
              "city": "São Paulo",
              "street": "Rua das Flores",
              "number": "123",
              "latitude": -23.5505,
              "longitude": -46.6333,
              "createdAt": "2025-07-14T12:00:00Z"
            }
            ```
            
            Exemplo de erro (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "O ID do cliente 'abc-123' não é um GUID válido."
            }
            ```
            Exemplo de erro (Status 404 Not Found):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
              "title": "Not Found",
              "status": 404,
              "detail": "Cliente com ID '99999999-9999-9999-9999-999999999999' não encontrado para o tenant."
            }
            ```
            </remarks>
            <param name="id">O **ID (GUID)** do cliente a ser consultado.</param>
            <returns>Um `OkResult` contendo o `CustomerResponse` ou um `NotFoundResult` se o cliente não for encontrado.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.DatabaseController">
            <summary>
            Controller para operações seguras de banco de dados, permitindo a execução de queries SQL de consulta.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.DatabaseController.#ctor(Hephaestus.Application.Interfaces.Database.IExecuteQueryUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.DatabaseController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.DatabaseController"/>.
            </summary>
            <param name="executeQueryUseCase">Caso de uso para executar queries no banco de dados.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.DatabaseController.ExecuteQuery(Hephaestus.Domain.DTOs.Request.ExecuteQueryRequest)">
            <summary>
            Executa uma query SQL de consulta (SELECT) no banco de dados.
            </summary>
            <remarks>
            Este endpoint permite a execução de queries SQL do tipo **SELECT** para consulta de dados.
            É uma operação altamente privilegiada e requer que o usuário autenticado possua a role **Admin** e tenha passado pela validação de **MFA (Autenticação Multifator)**.
            
            Exemplo de requisição:
            ```json
            {
              "query": "SELECT Id, Name, Email FROM Companies WHERE IsEnabled = TRUE LIMIT 10"
            }
            ```
            
            Exemplo de resposta de sucesso (Status 200 OK):
            ```json
            {
              "columns": ["Id", "Name", "Email"],
              "rows": [
                ["123e4567-e89b-12d3-a456-426614174001", "Empresa A", "contato@empresaA.com"],
                ["987f6543-d2c1-b0a9-8765-43210fedcba9", "Empresa B", "info@empresaB.com"]
              ],
              "rowCount": 2
            }
            ```
            
            Exemplo de erro de requisição inválida (Status 400 Bad Request):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
              "title": "Bad Request",
              "status": 400,
              "detail": "Apenas comandos SELECT são permitidos. Query recebida: 'DELETE FROM Users'."
            }
            ```
            Exemplo de erro de autenticação (Status 401 Unauthorized):
            ```
            (Nenhum corpo de resposta, apenas status 401)
            ```
            Exemplo de erro interno do servidor (Status 500 Internal Server Error):
            ```json
            {
              "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
              "title": "Internal Server Error",
              "status": 500,
              "detail": "Ocorreu um erro inesperado ao executar a query: Timeout de banco de dados."
            }
            ```
            </remarks>
            <param name="request">Um objeto <see cref="T:Hephaestus.Domain.DTOs.Request.ExecuteQueryRequest"/> contendo a query SQL a ser executada.</param>
            <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo os resultados da query em um <see cref="T:Hephaestus.Domain.DTOs.Response.ExecuteQueryResponse"/>.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.MenuController">
            <summary>
            Controller for managing menu items within a tenant's catalog.
            This includes creating, listing, retrieving, updating, and deleting menu items.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.#ctor(Hephaestus.Application.Interfaces.Menu.ICreateMenuItemUseCase,Hephaestus.Application.Interfaces.Menu.IGetMenuItemsUseCase,Hephaestus.Application.Interfaces.Menu.IGetMenuItemByIdUseCase,Hephaestus.Application.Interfaces.Menu.IUpdateMenuItemUseCase,Hephaestus.Application.Interfaces.Menu.IDeleteMenuItemUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.MenuController})">
            <summary>
            Initializes a new instance of the <see cref="T:Hephaestus.Controllers.MenuController"/>.
            </summary>
            <param name="createMenuItemUseCase">Use case for creating new menu items.</param>
            <param name="getMenuItemsUseCase">Use case for listing menu items.</param>
            <param name="getMenuItemByIdUseCase">Use case for retrieving a menu item by its ID.</param>
            <param name="updateMenuItemUseCase">Use case for updating existing menu items.</param>
            <param name="deleteMenuItemUseCase">Use case for deleting menu items.</param>
            <param name="logger">Logger for recording events and errors.</param>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.CreateMenuItem(Hephaestus.Domain.DTOs.Request.CreateMenuItemRequest)">
             <summary>
             Creates a new menu item for the authenticated tenant.
             </summary>
             <remarks>
             This endpoint allows a tenant to add a new item to their menu.
             Authentication with the **Tenant** role is required.
            
             Example Request:
             ```json
             {
               "name": "Pizza Calabresa",
               "description": "Pizza de calabresa defumada com cebola e queijo mussarela.",
               "categoryId": "c0d1e2f3-a4b5-c6d7-e8f9-0a1b2c3d4e5f",
               "price": 45.90,
               "isAvailable": true,
               "tagIds": ["massas", "pizzas"],
               "availableAdditionalIds": ["ad001", "ad002"],
               "imageUrl": "[https://example.com/images/pizza-calabresa.jpg](https://example.com/images/pizza-calabresa.jpg)"
             }
             ```
            
             Example Success Response (Status 201 Created):
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001"
             }
             ```
            
             Example Validation Error Response (Status 400 Bad Request):
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "Name": [
                   "The Name field is required."
                 ],
                 "Price": [
                   "The Price field must be a positive value."
                 ]
               }
             }
             ```
             Example Unauthorized Response (Status 401 Unauthorized):
             ```
             (No response body, just 401 status)
             ```
             </remarks>
             <param name="request">The data for the menu item to be created.</param>
             <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> containing the ID of the created menu item.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hephaestus.Controllers.MenuController.GetMenuItems(System.Int32,System.Int32,System.String,System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.Nullable{System.Decimal},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.String)" -->
        <member name="M:Hephaestus.Controllers.MenuController.GetMenuItemById(System.String)">
             <summary>
             Retrieves a specific menu item by its ID.
             </summary>
             <remarks>
             This endpoint returns the detailed information of a single menu item, provided it belongs to the authenticated tenant.
             Authentication with the **Tenant** role is required.
            
             Example Success Response (Status 200 OK):
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001",
               "tenantId": "456e7890-e89b-12d3-a456-426614174002",
               "name": "X-Burger",
               "description": "Hamb�rguer com queijo e salada",
               "categoryId": "789e0123-e89b-12d3-a456-426614174003",
               "price": 25.90,
               "isAvailable": true,
               "tagIds": ["tag1", "tag2"],
               "availableAdditionalIds": ["add1", "add2"],
               "imageUrl": "[https://example.com/images/x-burger.jpg](https://example.com/images/x-burger.jpg)"
             }
             ```
            
             Example Bad Request Response (Status 400 Bad Request):
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "Bad Request",
               "status": 400,
               "detail": "The provided ID 'invalid-guid' is not a valid GUID."
             }
             ```
             Example Not Found Response (Status 404 Not Found):
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "MenuItem with ID '99999999-9999-9999-9999-999999999999' not found for the tenant."
             }
             ```
             Example Unauthorized Response (Status 401 Unauthorized):
             ```
             (No response body, just 401 status)
             ```
             </remarks>
             <param name="id">The **ID (GUID)** of the menu item to retrieve.</param>
             <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> containing the <see cref="T:Hephaestus.Domain.DTOs.Response.MenuItemResponse"/> or a <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> if the item is not found.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.UpdateMenuItem(System.String,Hephaestus.Domain.DTOs.Request.UpdateMenuItemRequest)">
             <summary>
             Updates an existing menu item.
             </summary>
             <remarks>
             This endpoint allows a tenant to update an existing menu item. Only the fields provided in the request will be updated.
             Authentication with the **Tenant** role is required.
            
             Example Request:
             ```json
             {
               "name": "X-Burger Deluxe",
               "description": "Hamb�rguer premium com queijo, salada e bacon",
               "categoryId": "789e0123-e89b-12d3-a456-426614174003",
               "price": 32.90,
               "isAvailable": true,
               "tagIds": ["tag1", "tag2", "premium"],
               "availableAdditionalIds": ["add1", "add2", "add3"],
               "imageUrl": "[https://example.com/images/x-burger-deluxe.jpg](https://example.com/images/x-burger-deluxe.jpg)"
             }
             ```
            
             Example Success Response (Status 204 No Content):
             ```
             (No response body, just 204 status)
             ```
            
             Example Validation Error Response (Status 400 Bad Request):
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "Price": [
                   "The Price field must be a positive value."
                 ]
               }
             }
             ```
            
             Example Not Found Response (Status 404 Not Found):
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "MenuItem with ID '99999999-9999-9999-9999-999999999999' not found for the tenant."
             }
             ```
            
             Example Unauthorized Response (Status 401 Unauthorized):
             ```
             (No response body, just 401 status)
             ```
             </remarks>
             <param name="id">The **ID (GUID)** of the menu item to be updated.</param>
             <param name="request">The updated data for the menu item.</param>
             <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> indicating successful update.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.DeleteMenuItem(System.String)">
             <summary>
             Deletes a menu item.
             </summary>
             <remarks>
             This endpoint allows a tenant to delete a menu item from their catalog.
             Authentication with the **Tenant** role is required.
            
             Example Success Response (Status 204 No Content):
             ```
             (No response body, just 204 status)
             ```
            
             Example Not Found Response (Status 404 Not Found):
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "MenuItem with ID '99999999-9999-9999-9999-999999999999' not found for the tenant."
             }
             ```
            
             Example Unauthorized Response (Status 401 Unauthorized):
             ```
             (No response body, just 401 status)
             ```
             </remarks>
             <param name="id">The **ID (GUID)** of the menu item to be deleted.</param>
             <returns>A <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> indicating successful deletion.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.OpenAIController">
            <summary>
            Controller para integra��o segura com a API da OpenAI, permitindo a comunica��o com modelos de chat.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.OpenAIController.#ctor(Hephaestus.Application.Interfaces.OpenAI.IChatWithOpenAIUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.OpenAIController})">
            <summary>
            Inicializa uma nova inst�ncia do <see cref="T:Hephaestus.Controllers.OpenAIController"/>.
            </summary>
            <param name="chatWithOpenAIUseCase">Caso de uso para comunica��o com a API de chat da OpenAI.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.OpenAIController.Chat(Hephaestus.Domain.DTOs.Request.OpenAIRequest)">
            <summary>
            Envia uma consulta (prompt) para o modelo de chat da OpenAI e retorna a resposta.
            </summary>
            <remarks>
            Este endpoint permite interagir com a API de chat da OpenAI, enviando um prompt e, opcionalmente,
            especificando o formato de resposta desejado (texto ou JSON).
            <br/><br/>
            <b>Exemplo de request para resposta em texto:</b>
            <code>
            {
              "prompt": "Qual a capital da França?",
              "responseFormat": { "type": "text" }
            }
            </code>
            <br/>
            <b>Exemplo de request para resposta estruturada:</b>
            <code>
            {
              "prompt": "Quem é Albert Einstein?",
              "responseFormat": {
                "type": "json_object",
                "biografia": "resumo",
                "nacionalidade": "texto"
              }
            }
            </code>
            <br/>
            <b>Exemplo de resposta (campo response como string):</b>
            <code>
            {
              "responseJson": {
                "response": "A capital da França é Paris."
              }
            }
            </code>
            <br/>
            <b>Exemplo de resposta (campo response como objeto JSON):</b>
            <code>
            {
              "responseJson": {
                "response": {
                  "biografia": "Albert Einstein foi um físico teórico alemão...",
                  "nacionalidade": "Alemã"
                }
              }
            }
            </code>
            </remarks>
            <param name="request">Um objeto <see cref="T:Hephaestus.Domain.DTOs.Request.OpenAIRequest"/> contendo o prompt e configurações adicionais para a consulta.</param>
            <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo a resposta da OpenAI em um <see cref="T:OpenAIResponse"/>.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.PaymentController">
            <summary>
            Controlador responsável pelo gerenciamento de pagamentos, reembolsos e comprovantes.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.PaymentController.CreatePayment(Hephaestus.Domain.DTOs.Request.PaymentRequest)">
            <summary>
            Cria uma nova transação de pagamento.
            </summary>
            <remarks>
            Exemplo de requisição:
            {
              "amount": 100.00,
              "currency": "BRL",
              "paymentMethod": "pix",
              "customerId": "cliente123",
              "orderId": "abc123"
            }
            </remarks>
            <param name="request">Dados do pagamento.</param>
            <returns>Dados do pagamento criado.</returns>
            <response code="201">Pagamento criado com sucesso.</response>
        </member>
        <member name="M:Hephaestus.Controllers.PaymentController.GetPayment(System.String)">
            <summary>
            Consulta o status e detalhes de uma transação de pagamento.
            </summary>
            <param name="payment_id">ID do pagamento.</param>
            <returns>Dados do pagamento.</returns>
            <response code="200">Pagamento encontrado.</response>
            <response code="404">Pagamento não encontrado.</response>
        </member>
        <member name="M:Hephaestus.Controllers.PaymentController.RefundPayment(System.String,Hephaestus.Domain.DTOs.Request.RefundRequest)">
            <summary>
            Solicita o estorno total ou parcial de um pagamento.
            </summary>
            <param name="payment_id">ID do pagamento.</param>
            <param name="request">Dados do reembolso (valor opcional).</param>
            <returns>Dados do reembolso.</returns>
            <response code="200">Reembolso solicitado com sucesso.</response>
            <response code="404">Pagamento não encontrado.</response>
        </member>
        <member name="M:Hephaestus.Controllers.PaymentController.UpdatePaymentStatus(System.String,Hephaestus.Domain.DTOs.Request.UpdatePaymentStatusRequest)">
            <summary>
            Atualiza o status de um pagamento.
            </summary>
            <param name="payment_id">ID do pagamento.</param>
            <param name="request">Novo status do pagamento.</param>
            <returns>Pagamento atualizado.</returns>
            <response code="200">Status atualizado com sucesso.</response>
            <response code="400">Transição de status inválida.</response>
            <response code="404">Pagamento não encontrado.</response>
        </member>
        <member name="M:Hephaestus.Controllers.PaymentController.GetReceipt(System.String)">
            <summary>
            Obtém o comprovante de pagamento (PDF ou JSON).
            </summary>
            <param name="payment_id">ID do pagamento.</param>
            <returns>URL ou dados do comprovante.</returns>
            <response code="200">Comprovante gerado com sucesso.</response>
            <response code="404">Pagamento não encontrado.</response>
        </member>
        <member name="T:Hephaestus.Controllers.PromotionController">
            <summary>
            Controller para gerenciamento completo de promo��es de um tenant, incluindo cria��o, listagem,
            obten��o por ID, atualiza��o, exclus�o e notifica��o de promo��es.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.#ctor(Hephaestus.Application.Interfaces.Promotion.ICreatePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.IGetPromotionsUseCase,Hephaestus.Application.Interfaces.Promotion.IGetPromotionByIdUseCase,Hephaestus.Application.Interfaces.Promotion.IUpdatePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.IDeletePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.INotifyPromotionUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.PromotionController},Hephaestus.Domain.Repositories.IPromotionRepository)">
            <summary>
            Inicializa uma nova inst�ncia do <see cref="T:Hephaestus.Controllers.PromotionController"/>.
            </summary>
            <param name="createPromotionUseCase">Caso de uso para criar promo��es.</param>
            <param name="getPromotionsUseCase">Caso de uso para listar promo��es.</param>
            <param name="getPromotionByIdUseCase">Caso de uso para obter promo��o por ID.</param>
            <param name="updatePromotionUseCase">Caso de uso para atualizar promo��es.</param>
            <param name="deletePromotionUseCase">Caso de uso para remover promo��es.</param>
            <param name="notifyPromotionUseCase">Caso de uso para notificar promo��es.</param>
            <param name="logger">Logger para registro de eventos e erros.</param>
            <param name="promotionRepository">Reposit�rio para opera��es de promo��o.</param>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.CreatePromotion(Hephaestus.Domain.DTOs.Request.CreatePromotionRequest)">
            CreatePromotion
             <summary>
             Cria uma nova promo��o para o tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite que um tenant registre uma nova promo��o em seu cat�logo.
             Requer autentica��o com a role **Tenant**.
            
             **Exemplo de Corpo da Requisi��o:**
             ```json
             {
               "name": "Desconto de 10% no Ver�o",
               "description": "10% de desconto em todos os pedidos acima de R$50 durante o ver�o.",
               "discountType": "Percentage",
               "discountValue": 10.00,
               "menuItemId": null,
               "minOrderValue": 50.00,
               "maxUsesPerCustomer": 1,
               "maxTotalUses": 100,
               "applicableToTags": ["pizza", "lanche"],
               "startDate": "2025-07-12T00:00:00Z",
               "endDate": "2025-12-31T23:59:59Z",
               "isActive": true,
               "imageUrl": "[https://exemplo.com/promocao-verao.jpg](https://exemplo.com/promocao-verao.jpg)"
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 201 Created):**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001"
             }
             ```
            
             **Exemplo de Erro de Valida��o (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "Name": [
                   "O campo 'Name' � obrigat�rio."
                 ],
                 "DiscountValue": [
                   "O valor do desconto deve ser positivo."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro de Autoriza��o (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId n�o encontrado no token."
             }
             ```
            
             **Exemplo de Erro Interno do Servidor (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro inesperado ao criar a promo��o."
             }
             ```
             </remarks>
             <param name="request">Dados da promo��o a ser criada (<see cref="T:Hephaestus.Domain.DTOs.Request.CreatePromotionRequest"/>).</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> contendo o ID da promo��o criada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetPromotions(System.Nullable{System.Boolean},System.Int32,System.Int32,System.String,System.String)">
            GetPromotions
             <summary>
             Lista as promo��es do tenant autenticado.
             </summary>
             <remarks>
             Este endpoint retorna uma lista de promo��es registradas para o tenant.
             � poss�vel filtrar as promo��es por status de ativa��o (`isActive`).
             Requer autentica��o com a role **Tenant**.
            
             **Exemplo de Requisi��o:**
             ```http
             GET /api/Promotion?isActive=true
             ```
            
             **Exemplo de Resposta de Sucesso (Status 200 OK):**
             ```json
             [
               {
                 "id": "123e4567-e89b-12d3-a456-426614174001",
                 "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                 "name": "Desconto de 10% no Ver�o",
                 "description": "10% de desconto em todos os pedidos.",
                 "discountType": "Percentage",
                 "discountValue": 10.00,
                 "menuItemId": null,
                 "minOrderValue": 50.00,
                 "maxUsesPerCustomer": 1,
                 "maxTotalUses": 100,
                 "applicableToTags": ["pizza", "lanche"],
                 "startDate": "2025-07-12T00:00:00Z",
                 "endDate": "2025-12-31T23:59:59Z",
                 "isActive": true,
                 "imageUrl": "[https://exemplo.com/promocao-verao.jpg](https://exemplo.com/promocao-verao.jpg)"
               },
               {
                 "id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                 "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                 "name": "Frete Gr�tis para Novos Clientes",
                 "description": "Frete gr�tis na primeira compra.",
                 "discountType": "FreeShipping",
                 "discountValue": 0.00,
                 "menuItemId": null,
                 "minOrderValue": 30.00,
                 "maxUsesPerCustomer": 1,
                 "maxTotalUses": 50,
                 "applicableToTags": [],
                 "startDate": "2025-07-01T00:00:00Z",
                 "endDate": "2025-08-31T23:59:59Z",
                 "isActive": true,
                 "imageUrl": null
               }
             ]
             ```
            
             **Exemplo de Erro de Autoriza��o (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId n�o encontrado no token."
             }
             ```
            
             **Exemplo de Erro Interno do Servidor (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro inesperado ao listar as promo��es."
             }
             ```
             </remarks>
             <param name="isActive">Filtro opcional: `true` para promo��es ativas, `false` para inativas. Se omitido, retorna todas as promo��es.</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo uma lista de objetos <see cref="T:Hephaestus.Domain.DTOs.Response.PromotionResponse"/>.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetPromotionById(System.String)">
            GetPromotionById
             <summary>
             Obt�m os detalhes de uma promo��o espec�fica por ID.
             </summary>
             <remarks>
             Este endpoint retorna todas as informa��es de uma promo��o, desde que a promo��o perten�a ao tenant autenticado.
             Requer autentica��o com a role **Tenant**.
            
             **Exemplo de Requisi��o:**
             ```http
             GET /api/Promotion/123e4567-e89b-12d3-a456-426614174001
             ```
            
             **Exemplo de Resposta de Sucesso (Status 200 OK):**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001",
               "tenantId": "456e7890-e89b-12d3-a456-426614174002",
               "name": "Desconto de 10% no Ver�o",
               "description": "10% de desconto em todos os pedidos acima de R$50 durante o ver�o.",
               "discountType": "Percentage",
               "discountValue": 10.00,
               "menuItemId": null,
               "minOrderValue": 50.00,
               "maxUsesPerCustomer": 1,
               "maxTotalUses": 100,
               "applicableToTags": ["pizza", "lanche"],
               "startDate": "2025-07-12T00:00:00Z",
               "endDate": "2025-12-31T23:59:59Z",
               "isActive": true,
               "imageUrl": "[https://exemplo.com/promocao-verao.jpg](https://exemplo.com/promocao-verao.jpg)"
             }
             ```
            
             **Exemplo de Erro (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "Bad Request",
               "status": 400,
               "detail": "O ID da promo��o 'invalido-id' n�o � um GUID v�lido."
             }
             ```
            
             **Exemplo de Erro (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Promo��o com ID '99999999-9999-9999-9999-999999999999' n�o encontrada para o tenant."
             }
             ```
            
             **Exemplo de Erro de Autoriza��o (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId n�o encontrado no token."
             }
             ```
             </remarks>
             <param name="id">O **ID (GUID)** da promo��o a ser consultada.</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo o <see cref="T:Hephaestus.Domain.DTOs.Response.PromotionResponse"/> ou um <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> se a promo��o n�o for encontrada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.UpdatePromotion(System.String,Hephaestus.Domain.DTOs.Request.UpdatePromotionRequest)">
            UpdatePromotion
             <summary>
             Atualiza uma promo��o existente para o tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite que um tenant atualize os dados de uma promo��o existente.
             Requer autentica��o com a role **Tenant**.
            
             **Exemplo de Corpo da Requisi��o:**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001",
               "name": "Desconto de 15% no Ver�o",
               "description": "15% de desconto em todos os pedidos acima de R$60 durante o ver�o.",
               "discountType": "Percentage",
               "discountValue": 15.00,
               "menuItemId": null,
               "minOrderValue": 60.00,
               "maxUsesPerCustomer": 2,
               "maxTotalUses": 150,
               "applicableToTags": ["pizza", "lanche", "bebidas"],
               "startDate": "2025-07-12T00:00:00Z",
               "endDate": "2025-12-31T23:59:59Z",
               "isActive": true,
               "imageUrl": "[https://exemplo.com/promocao-verao-atualizada.jpg](https://exemplo.com/promocao-verao-atualizada.jpg)"
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 204 No Content):**
             ```
             (Nenhum corpo de resposta, apenas status 204)
             ```
            
             **Exemplo de Erro de Valida��o (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "Name": [
                   "O campo 'Name' � obrigat�rio."
                 ],
                 "DiscountValue": [
                   "O valor do desconto deve ser positivo."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Promo��o com ID '99999999-9999-9999-9999-999999999999' n�o encontrada para o tenant."
             }
             ```
            
             **Exemplo de Erro de Autoriza��o (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId n�o encontrado no token."
             }
             ```
             </remarks>
             <param name="id">O **ID (GUID)** da promo��o a ser atualizada.</param>
             <param name="request">Dados atualizados da promo��o (<see cref="T:Hephaestus.Domain.DTOs.Request.UpdatePromotionRequest"/>).</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> em caso de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.UpdatePromotionStatus(System.String,Hephaestus.Domain.DTOs.Request.UpdatePromotionStatusRequest)">
            <summary>
            Atualiza o status de ativa��o de uma promo��o (ativa/inativa).
            </summary>
            <param name="id">ID da promo��o.</param>
            <param name="request">Novo status de ativa��o.</param>
            <returns>Promo��o atualizada.</returns>
            <response code="200">Status atualizado com sucesso.</response>
            <response code="400">Regras de neg�cio violadas.</response>
            <response code="404">Promo��o n�o encontrada.</response>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.DeletePromotion(System.String)">
            DeletePromotion
             <summary>
             Remove uma promo��o do tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite que um tenant remova uma promo��o existente.
             Requer autentica��o com a role **Tenant**.
            
             **Exemplo de Requisi��o:**
             ```http
             DELETE /api/Promotion/123e4567-e89b-12d3-a456-426614174001
             ```
            
             **Exemplo de Resposta de Sucesso (Status 204 No Content):**
             ```
             (Nenhum corpo de resposta, apenas status 204)
             ```
            
             **Exemplo de Erro (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "Bad Request",
               "status": 400,
               "detail": "O ID da promo��o 'invalido-id' n�o � um GUID v�lido."
             }
             ```
            
             **Exemplo de Erro (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Promo��o com ID '99999999-9999-9999-9999-999999999999' n�o encontrada para o tenant."
             }
             ```
            
             **Exemplo de Erro de Autoriza��o (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId n�o encontrado no token."
             }
             ```
             </remarks>
             <param name="id">O **ID (GUID)** da promo��o a ser removida.</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> em caso de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.NotifyPromotion(Hephaestus.Domain.DTOs.Request.NotifyPromotionRequest)">
            NotifyPromotion
             <summary>
             Envia notifica��o de uma promo��o via WhatsApp.
             </summary>
             <remarks>
             Este endpoint permite que um tenant envie notifica��es de promo��es para seus clientes via WhatsApp.
             Requer autentica��o com a role **Tenant**.
            
             **Exemplo de Corpo da Requisi��o:**
             ```json
             {
               "promotionId": "123e4567-e89b-12d3-a456-426614174001",
               "messageTemplate": "?? Promo��o especial! {promotionName} - {promotionDescription} V�lida at� {endDate}. Aproveite!",
               "customerPhoneNumbers": ["11987654321", "21987654321"]
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 204 No Content):**
             ```
             (Nenhum corpo de resposta, apenas status 204)
             ```
            
             **Exemplo de Erro de Valida��o (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "PromotionId": [
                   "O ID da promo��o � obrigat�rio."
                 ],
                 "MessageTemplate": [
                   "O template da mensagem � obrigat�rio."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Promo��o com ID '99999999-9999-9999-9999-999999999999' n�o encontrada para o tenant."
             }
             ```
            
             **Exemplo de Erro de Autoriza��o (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId n�o encontrado no token."
             }
             ```
             </remarks>
             <param name="request">Dados da notifica��o (<see cref="T:Hephaestus.Domain.DTOs.Request.NotifyPromotionRequest"/>).</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> em caso de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.UsePromotion(System.String,Hephaestus.Domain.DTOs.Request.UsePromotionRequest)">
            <summary>
            Registra o uso de uma promo��o por um cliente em um pedido.
            </summary>
            <param name="id">ID da promo��o.</param>
            <param name="request">Dados do uso (cliente, pedido).</param>
            <returns>Confirma��o do uso.</returns>
            <response code="200">Uso registrado com sucesso.</response>
            <response code="400">Limite de uso atingido ou promo��o inv�lida.</response>
        </member>
        <member name="M:Hephaestus.Controllers.ReviewController.Create(Hephaestus.Domain.DTOs.Request.CreateReviewRequest)">
            <summary>
            Cria um novo review para um pedido.
            </summary>
            <param name="request">Dados do review.</param>
            <returns>Review criado.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.TagController">
            <summary>
            Controller para gerenciamento de tags, permitindo a cria��o, listagem e exclus�o de tags
            associadas aos itens de card�pio de um tenant.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.TagController.#ctor(Hephaestus.Application.Interfaces.Tag.ICreateTagUseCase,Hephaestus.Application.Interfaces.Tag.IGetAllTagsByTenantUseCase,Hephaestus.Application.Interfaces.Tag.IDeleteTagUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.TagController})">
            <summary>
            Inicializa uma nova inst�ncia do <see cref="T:Hephaestus.Controllers.TagController"/>.
            </summary>
            <param name="createTagUseCase">Caso de uso para cria��o de tags.</param>
            <param name="getAllTagsByTenantUseCase">Caso de uso para listagem de tags por tenant.</param>
            <param name="deleteTagUseCase">Caso de uso para remo��o de tags.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.TagController.CreateTag(Hephaestus.Domain.DTOs.Request.TagRequest)">
            CreateTag
             <summary>
             Cria uma nova tag com funcionalidade híbrida.
             </summary>
             <remarks>
             Este endpoint permite que um **Administrador** ou um **Tenant** crie uma nova tag,
             com comportamento diferente baseado no role do usuário:
            
             **Comportamento por Role:**
             - **Admin**: Cria tags **globais** (disponíveis para todas as empresas)
             - **Tenant**: Cria tags **locais** (apenas para sua empresa)
            
             **Exemplo de Corpo da Requisição:**
             ```json
             {
               "name": "Vegetariano"
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 200 OK) - Tag Local:**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001",
               "companyId": "456e7890-e89b-12d3-a456-426614174002",
               "name": "Vegetariano",
               "isGlobal": false
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 200 OK) - Tag Global:**
             ```json
             {
               "id": "123e4567-e89b-12d3-a456-426614174001",
               "companyId": "",
               "name": "Vegetariano",
               "isGlobal": true
             }
             ```
            
             **Exemplo de Erro de Validação (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "Name": [
                   "O campo 'Name' é obrigatório e deve ter entre 3 e 50 caracteres."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro de Conflito (Status 409 Conflict):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)",
               "title": "Conflict",
               "status": 409,
               "detail": "Tag já registrada para este tenant."
             }
             ```
            
             **Exemplo de Erro de Operação Inválida (Status 400 Bad Request):**
             ```json
             {
               "error": {
                 "code": "INVALID_OPERATION",
                 "message": "CompanyId não encontrado no token.",
                 "type": "InvalidOperationError"
               }
             }
             ```
             </remarks>
             <param name="request">Dados da tag a ser criada (<see cref="T:Hephaestus.Domain.DTOs.Request.TagRequest"/>).</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo o objeto <see cref="T:Hephaestus.Domain.DTOs.Response.TagResponse"/> da tag criada.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hephaestus.Controllers.TagController.GetTags(System.Int32,System.Int32,System.String,System.String)" -->
        <member name="M:Hephaestus.Controllers.TagController.DeleteTag(System.String)">
            DeleteTag
             <summary>
             Exclui uma tag existente.
             </summary>
             <remarks>
             Este endpoint permite que um **Administrador** ou um **Tenant** remova uma tag
             do sistema. A tag só pode ser excluída se não estiver associada a nenhum item de cardápio.
            
             **Exemplo de Requisição:**
             ```http
             DELETE /api/Tag/123e4567-e89b-12d3-a456-426614174001
             ```
            
             **Exemplo de Resposta de Sucesso (Status 204 No Content):**
             ```
             (Nenhum corpo de resposta)
             ```
            
             **Exemplo de Erro de Requisição Inválida (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "Bad Request",
               "status": 400,
               "detail": "O ID da tag 'abc-123' não é um GUID válido."
             }
             ```
            
             **Exemplo de Erro de Autorização (Status 401 Unauthorized):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7235#section-3.1](https://tools.ietf.org/html/rfc7235#section-3.1)",
               "title": "Unauthorized",
               "status": 401,
               "detail": "TenantId não encontrado no token de autenticação ou token inválido."
             }
             ```
            
             **Exemplo de Erro Não Encontrado (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Tag com ID '99999999-9999-9999-9999-999999999999' não encontrada ou não pertence a este tenant."
             }
             ```
            
             **Exemplo de Erro de Conflito (Status 409 Conflict):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.8](https://tools.ietf.org/html/rfc7231#section-6.5.8)",
               "title": "Conflict",
               "status": 409,
               "detail": "A tag 'Vegetariano' não pode ser excluída pois está associada a um ou mais itens de cardápio."
             }
             ```
            
             **Exemplo de Erro Interno do Servidor (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro inesperado ao excluir a tag."
             }
             ```
             </remarks>
             <param name="id">ID da tag a ser excluída.</param>
             <returns>Status 204 No Content em caso de sucesso.</returns>
        </member>
        <member name="T:Hephaestus.Api.Controllers.OrderController">
            <summary>
            Controller para gerenciamento de pedidos, permitindo a criação, consulta, atualização e rastreamento de status de pedidos.
            </summary>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.#ctor(Hephaestus.Application.Interfaces.Order.ICreateOrderUseCase,Hephaestus.Application.Interfaces.Order.IGetOrdersUseCase,Hephaestus.Application.Interfaces.Order.IGetOrderByIdUseCase,Hephaestus.Application.Interfaces.Order.IUpdateOrderUseCase,Hephaestus.Application.Interfaces.Order.IGetCustomerOrderStatusUseCase,Hephaestus.Application.Interfaces.Order.IPatchOrderUseCase)">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Api.Controllers.OrderController"/>.
            </summary>
            <param name="createOrderUseCase">Caso de uso para criação de pedidos.</param>
            <param name="getOrdersUseCase">Caso de uso para listagem de pedidos.</param>
            <param name="getOrderByIdUseCase">Caso de uso para obtenção de pedido por ID.</param>
            <param name="updateOrderUseCase">Caso de uso para atualização de pedidos.</param>
            <param name="getCustomerOrderStatusUseCase">Caso de uso para obtenção do status de pedidos de um cliente.</param>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.CreateOrder(Hephaestus.Domain.DTOs.Request.CreateOrderRequest)">
            CreateOrder
             <summary>
             Cria um novo pedido para o tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite que um tenant registre um novo pedido. A autenticação com a role **Tenant** é obrigatória.
            
             **Exemplo de Requisição:**
             ```json
             {
               "customerPhoneNumber": "11987654321",
               "items": [
                 {
                   "menuItemId": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
                   "quantity": 2,
                   "customizations": [
                     {
                       "type": "Tamanho",
                       "value": "Grande"
                     },
                     {
                       "type": "Molho",
                       "value": "Barbecue"
                     }
                   ]
                 }
               ],
               "notes": "Entrega sem contato"
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 201 Created):**
             ```json
             {
               "id": "e4f5g6h7-i8j9-0k1l-2m3n-4o5p6q7r8s9t"
             }
             ```
            
             **Exemplo de Erro (Status 401 Unauthorized):**
             ```
             (Sem corpo de resposta, apenas status 401)
             ```
            
             **Exemplo de Erro (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "CustomerPhoneNumber": [
                   "O número de telefone do cliente é obrigatório."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro inesperado ao criar o pedido."
             }
             ```
             </remarks>
             <param name="request">Dados para a criação do pedido (<see cref="T:Hephaestus.Domain.DTOs.Request.CreateOrderRequest"/>).</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.CreatedAtActionResult"/> contendo o ID do pedido criado.</returns>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.GetOrders(System.String,System.String,System.Int32,System.Int32,System.String,System.String)">
            ### GetOrders
             <summary>
             Lista pedidos para o tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite consultar uma lista de pedidos associados ao tenant autenticado.
             É possível filtrar os resultados por número de telefone do cliente e/ou pelo status do pedido.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Resposta de Sucesso (Status 200 OK):**
             ```json
             [
               {
                 "id": "e4f5g6h7-i8j9-0k1l-2m3n-4o5p6q7r8s9t",
                 "customerPhoneNumber": "11987654321",
                 "status": "Pending",
                 "totalAmount": 51.80,
                 "createdAt": "2024-07-14T10:00:00Z"
               },
               {
                 "id": "a1b2c3d4-e5f6-7890-1234-567890fedcba",
                 "customerPhoneNumber": "11998877665",
                 "status": "Completed",
                 "totalAmount": 7.00,
                 "createdAt": "2024-07-13T15:30:00Z"
               }
             ]
             ```
            
             **Exemplo de Erro (Status 401 Unauthorized):**
             ```
             (Sem corpo de resposta, apenas status 401)
             ```
            
             **Exemplo de Erro (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro ao buscar os pedidos."
             }
             ```
             </remarks>
             <param name="customerPhoneNumber">Filtro opcional: número de telefone do cliente.</param>
             <param name="status">Filtro opcional: status do pedido (e.g., 'Pending', 'Processing', 'Completed', 'Cancelled').</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo uma lista de pedidos.</returns>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.GetOrderById(System.String)">
            GetOrderById
             <summary>
             Obtém os detalhes de um pedido específico por ID.
             </summary>
             <remarks>
             Este endpoint retorna todas as informações de um pedido, desde que o pedido pertença ao tenant autenticado.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Resposta de Sucesso (Status 200 OK):**
             ```json
             {
               "id": "e4f5g6h7-i8j9-0k1l-2m3n-4o5p6q7r8s9t",
               "customerPhoneNumber": "11987654321",
               "deliveryAddress": {
                 "street": "Rua das Flores",
                 "number": "123"
               },
               "status": "Processing",
               "totalAmount": 65.10
             }
             ```
            
             **Exemplo de Erro (Status 401 Unauthorized):**
             ```
             (Sem corpo de resposta, apenas status 401)
             ```
            
             **Exemplo de Erro (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Pedido com ID '99999999-9999-9999-9999-999999999999' não encontrado para este tenant."
             }
             ```
            
             **Exemplo de Erro (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro ao buscar o pedido."
             }
             ```
             </remarks>
             <param name="id">O **ID (GUID)** do pedido a ser consultado.</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo os detalhes do pedido, ou um <see cref="T:Microsoft.AspNetCore.Mvc.NotFoundResult"/> se não encontrado.</returns>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.UpdateOrder(System.String,Hephaestus.Domain.DTOs.Request.UpdateOrderRequest)">
            UpdateOrder
             <summary>
             Atualiza um pedido existente para o tenant autenticado.
             </summary>
             <remarks>
             Este endpoint permite atualizar um pedido existente do tenant. A autenticação com a role **Tenant** é obrigatória.
            
             **Exemplo de Requisição:**
             ```json
             {
               "status": "Completed",
               "deliveryNotes": "Pedido entregue ao cliente."
             }
             ```
            
             **Exemplo de Resposta de Sucesso (Status 204 No Content):**
             ```
             (Sem corpo de resposta, apenas status 204)
             ```
            
             **Exemplo de Erro (Status 401 Unauthorized):**
             ```
             (Sem corpo de resposta, apenas status 401)
             ```
            
             **Exemplo de Erro (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "Status": [
                   "O status fornecido é inválido."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro (Status 404 Not Found):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.4](https://tools.ietf.org/html/rfc7231#section-6.5.4)",
               "title": "Not Found",
               "status": 404,
               "detail": "Pedido com ID '99999999-9999-9999-9999-999999999999' não encontrado para atualização."
             }
             ```
            
             **Exemplo de Erro (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro inesperado ao atualizar o pedido."
             }
             ```
             </remarks>
             <param name="id">O **ID (GUID)** do pedido a ser atualizado.</param>
             <param name="request">Dados para a atualização do pedido (<see cref="T:Hephaestus.Domain.DTOs.Request.UpdateOrderRequest"/>).</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.NoContentResult"/> indicando o sucesso da atualização.</returns>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.PatchOrder(System.String,Hephaestus.Domain.DTOs.Request.UpdateOrderRequest)">
            <summary>
            Atualiza parcialmente um pedido existente para o tenant autenticado.
            </summary>
            <remarks>
            Envie apenas os campos que deseja alterar. Campos não enviados permanecem inalterados.
            </remarks>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.UpdateOrderStatus(System.String,Hephaestus.Domain.DTOs.Request.UpdateOrderStatusRequest)">
            <summary>
            Atualiza o status de um pedido.
            </summary>
            <param name="id">ID do pedido.</param>
            <param name="request">Novo status do pedido.</param>
            <returns>Pedido atualizado.</returns>
            <response code="200">Status atualizado com sucesso.</response>
            <response code="400">Transição de status inválida.</response>
            <response code="404">Pedido não encontrado.</response>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.UpdateOrderPaymentStatus(System.String,Hephaestus.Domain.DTOs.Request.UpdateOrderPaymentStatusRequest)">
            <summary>
            Atualiza o status de pagamento de um pedido.
            </summary>
            <param name="id">ID do pedido.</param>
            <param name="request">Novo status de pagamento.</param>
            <returns>Pedido atualizado.</returns>
            <response code="200">Status de pagamento atualizado com sucesso.</response>
            <response code="400">Transição de status inválida.</response>
            <response code="404">Pedido não encontrado.</response>
        </member>
        <member name="M:Hephaestus.Api.Controllers.OrderController.GetCustomerOrderStatus(System.String)">
            ### GetCustomerOrderStatus
             <summary>
             Obtém o status dos pedidos de um cliente específico.
             </summary>
             <remarks>
             Este endpoint permite que um tenant consulte o status atual de todos os pedidos associados a um determinado número de telefone de cliente.
             Requer autenticação com a role **Tenant**.
            
             **Exemplo de Resposta de Sucesso (Status 200 OK):**
             ```json
             [
               {
                 "orderId": "e4f5g6h7-i8j9-0k1l-2m3n-4o5p6q7r8s9t",
                 "status": "Processing",
                 "lastUpdate": "2024-07-14T10:30:00Z"
               },
               {
                 "orderId": "f1e2d3c4-b5a6-9876-5432-10fedcba9876",
                 "status": "Pending",
                 "lastUpdate": "2024-07-14T11:00:00Z"
               }
             ]
             ```
            
             **Exemplo de Erro (Status 401 Unauthorized):**
             ```
             (Sem corpo de resposta, apenas status 401)
             ```
            
             **Exemplo de Erro (Status 400 Bad Request):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.5.1](https://tools.ietf.org/html/rfc7231#section-6.5.1)",
               "title": "One or more validation errors occurred.",
               "status": 400,
               "errors": {
                 "CustomerPhoneNumber": [
                   "O número de telefone do cliente é inválido."
                 ]
               }
             }
             ```
            
             **Exemplo de Erro (Status 500 Internal Server Error):**
             ```json
             {
               "type": "[https://tools.ietf.org/html/rfc7231#section-6.6.1](https://tools.ietf.org/html/rfc7231#section-6.6.1)",
               "title": "Internal Server Error",
               "status": 500,
               "detail": "Ocorreu um erro ao obter o status dos pedidos do cliente."
             }
             ```
             </remarks>
             <param name="customerPhoneNumber">O número de telefone do cliente para o qual consultar o status dos pedidos.</param>
             <returns>Um <see cref="T:Microsoft.AspNetCore.Mvc.OkObjectResult"/> contendo uma lista com o status dos pedidos do cliente.</returns>
        </member>
        <member name="T:Hephaestus.Middleware.GlobalExceptionHandlingMiddleware">
            <summary>
            Middleware para tratamento global de exceções.
            </summary>
        </member>
        <member name="M:Hephaestus.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processa a requisição e trata exceções globalmente.
            </summary>
            <param name="context">Contexto da requisição HTTP.</param>
        </member>
        <member name="M:Hephaestus.Middleware.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Trata uma exceção e retorna uma resposta HTTP apropriada.
            </summary>
            <param name="context">Contexto da requisição HTTP.</param>
            <param name="exception">Exceção a ser tratada.</param>
        </member>
        <member name="T:Hephaestus.Program">
            <summary>
            Configura��es da aplica��o principal.
            </summary>
        </member>
        <member name="M:Hephaestus.Program.Main(System.String[])">
            <summary>
            Ponto de entrada da aplica��o.
            </summary>
            <param name="args">Argumentos da linha de comando.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configura os servi�os no cont�iner de inje��o de depend�ncia.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
            <param name="configuration">Configura��o da aplica��o.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configura a autentica��o JWT no cont�iner de servi�os.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
            <param name="configuration">Configura��o da aplica��o.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configura as pol�ticas de autoriza��o no cont�iner de servi�os.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configura o Swagger com suporte para autentica��o Bearer e documenta��o XML opcional.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureMiddleware(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configura o pipeline de middleware da aplica��o.
            </summary>
            <param name="app">Aplica��o web configurada.</param>
        </member>
        <member name="T:Hephaestus.Application.Services.PendingOrderCleanupService">
            <summary>
            Serviço em background para exclusão automática de pedidos Pending não pagos após X minutos.
            </summary>
        </member>
    </members>
</doc>
