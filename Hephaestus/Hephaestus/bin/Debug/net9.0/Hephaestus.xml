<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hephaestus</name>
    </assembly>
    <members>
        <member name="T:Hephaestus.Controllers.AdministrationController">
            <summary>
            Controller para gerenciamento administrativo de empresas, vendas e logs.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.#ctor(Hephaestus.Application.Interfaces.Administration.IGetCompaniesUseCase,Hephaestus.Application.Interfaces.Administration.IUpdateCompanyUseCase,Hephaestus.Application.Interfaces.Administration.ISalesReportUseCase,Hephaestus.Application.Interfaces.Administration.IAuditLogUseCase,Hephaestus.Application.Interfaces.Administration.IGetCompaniesWithinRadiusUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AdministrationController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.AdministrationController"/>.
            </summary>
            <param name="getCompaniesUseCase">Caso de uso para listar empresas.</param>
            <param name="updateCompanyUseCase">Caso de uso para atualizar empresas.</param>
            <param name="salesReportUseCase">Caso de uso para relatórios de vendas.</param>
            <param name="auditLogUseCase">Caso de uso para logs de auditoria.</param>
            <param name="getCompaniesWithinRadiusUseCase">Caso de uso para buscar empresas dentro de um raio.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetCompanies(System.Nullable{System.Boolean})">
            <summary>
            Lista todas as empresas.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "name": "Empresa Exemplo",
                "email": "exemplo@empresa.com",
                "phoneNumber": "123456789",
                "isEnabled": true,
                "feeType": "Percentage",
                "feeValue": 5.0,
                "city": "São Paulo",
                "neighborhood": "Vila Mariana",
                "street": "Rua Exemplo",
                "number": "123",
                "latitude": -23.550520,
                "longitude": -46.633308,
                "slogan": "O melhor da cidade!",
                "description": "Descrição da empresa."
              }
            ]
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Erro interno do servidor"
            }
            ```
            </remarks>
            <param name="isEnabled">Filtro opcional para empresas habilitadas (true) ou desabilitadas (false).</param>
            <returns>Lista de empresas.</returns>
            <exception cref="T:System.Exception">Erro inesperado ao listar empresas.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.UpdateCompany(System.String,Hephaestus.Application.DTOs.Request.UpdateCompanyRequest)">
            <summary>
            Atualiza configurações de uma empresa.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Empresa Atualizada",
              "email": "atualizada@empresa.com",
              "phoneNumber": "987654321",
              "apiKey": "xyz789",
              "feeType": "Percentage",
              "feeValue": 5.0,
              "isEnabled": true,
              "city": "Rio de Janeiro",
              "neighborhood": "Copacabana",
              "street": "Avenida Nova",
              "number": "456",
              "latitude": -22.906847,
              "longitude": -43.172896,
              "slogan": "Novo slogan!",
              "description": "Nova descrição."
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Empresa não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da empresa a ser atualizada.</param>
            <param name="request">Dados atualizados da empresa.</param>
            <returns>Status de sucesso (204 No Content).</returns>
            <exception cref="T:System.ArgumentNullException">Se request for nulo.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Se a empresa não for encontrada.</exception>
            <exception cref="T:System.InvalidOperationException">Se e-mail ou telefone já estiver registrado ou usuário não for administrador.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetSalesReport(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Relatório consolidado de vendas de todas as empresas.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "totalSales": 1000.00,
              "totalTransactions": 50,
              "averageTicket": 20.00,
              "byCompany": [
                {
                  "companyId": "123e4567-e89b-12d3-a456-426614174001",
                  "companyName": "Empresa Exemplo",
                  "totalSales": 500.00,
                  "totalTransactions": 25
                }
              ]
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Datas inválidas."
            }
            ```
            </remarks>
            <param name="startDate">Data inicial do relatório no formato ISO 8601 (ex.: 2024-01-01). Opcional.</param>
            <param name="endDate">Data final do relatório no formato ISO 8601 (ex.: 2024-12-31). Opcional.</param>
            <param name="tenantId">ID da empresa (tenant) para filtrar vendas. Opcional.</param>
            <returns>Relatório de vendas consolidado.</returns>
            <exception cref="T:System.InvalidOperationException">Datas inválidas ou tenantId inválido.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAuditLogs(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Lista logs de auditoria de ações administrativas.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "userId": "456e7890-e89b-12d3-a456-426614174002",
                "action": "UpdateCompany",
                "entityId": "123e4567-e89b-12d3-a456-426614174001",
                "details": "Empresa 123e4567-e89b-12d3-a456-426614174001 atualizada por admin.",
                "createdAt": "2024-01-01T12:00:00Z"
              }
            ]
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Erro interno do servidor"
            }
            ```
            </remarks>
            <param name="adminId">ID do administrador (GUID) para filtrar logs. Opcional.</param>
            <param name="startDate">Data inicial do log no formato ISO 8601 (ex.: 2024-01-01). Opcional.</param>
            <param name="endDate">Data final do log no formato ISO 8601 (ex.: 2024-12-31). Opcional.</param>
            <returns>Lista de logs de auditoria.</returns>
            <exception cref="T:System.InvalidOperationException">Parâmetros inválidos.</exception>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hephaestus.Controllers.AdministrationController.GetCompaniesByRadius(System.Double,System.Double,System.Double,System.String,System.String)" -->
        <member name="T:Hephaestus.Controllers.AuthController">
            <summary>
            Controller para autenticação e gerenciamento de usuários.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.#ctor(Hephaestus.Application.Interfaces.Auth.ILoginUseCase,Hephaestus.Application.Interfaces.Auth.IRegisterCompanyUseCase,Hephaestus.Application.Interfaces.Auth.IResetPasswordUseCase,Hephaestus.Application.Interfaces.Auth.IMfaUseCase,Hephaestus.Domain.Services.ILoggedUserService,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AuthController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.AuthController"/>.
            </summary>
            <param name="loginUseCase">Caso de uso para login.</param>
            <param name="registerCompanyUseCase">Caso de uso para registro de empresas.</param>
            <param name="resetPasswordUseCase">Caso de uso para redefinição de senha.</param>
            <param name="mfaUseCase">Caso de uso para autenticação multifator (MFA).</param>
            <param name="loggedUserService">Serviço para obter informações do usuário logado.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.Login(Hephaestus.Application.DTOs.Request.LoginRequest,System.String)">
            <summary>
            Autentica um usuário e retorna um token JWT.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Credenciais inválidas."
            }
            ```
            </remarks>
            <param name="request">Dados de login (e-mail e senha).</param>
            <param name="mfaCode">Código MFA opcional para administradores.</param>
            <returns>Token JWT.</returns>
            <exception cref="T:System.InvalidOperationException">Credenciais inválidas ou código MFA inválido.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.Register(Hephaestus.Application.DTOs.Request.RegisterCompanyRequest)">
            <summary>
            Registra uma nova empresa (apenas administradores com MFA validado).
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "companyId": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "E-mail já registrado."
            }
            ```
            </remarks>
            <param name="request">Dados da empresa a ser registrada.</param>
            <returns>ID da empresa registrada.</returns>
            <exception cref="T:System.InvalidOperationException">E-mail ou telefone já registrado.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ResetPasswordRequest(Hephaestus.Application.DTOs.Request.ResetPasswordRequest)">
            <summary>
            Solicita um token para redefinição de senha.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "token": "ABC123"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "E-mail não encontrado."
            }
            ```
            </remarks>
            <param name="request">E-mail do usuário.</param>
            <returns>Token de redefinição de senha.</returns>
            <exception cref="T:System.InvalidOperationException">E-mail não encontrado.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ResetPassword(Hephaestus.Application.DTOs.Request.ResetPasswordConfirmRequest)">
            <summary>
            Confirma a redefinição de senha com um token.
            </summary>
            <remarks>
            Exemplo de erro:
            ```json
            {
              "error": "Token inválido ou expirado."
            }
            ```
            </remarks>
            <param name="request">E-mail, token e nova senha.</param>
            <returns>Status de sucesso.</returns>
            <exception cref="T:System.InvalidOperationException">Token inválido ou expirado.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">E-mail não encontrado.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.SetupMfa">
            <summary>
            Configura a autenticação multifator (MFA) para um administrador.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "secret": "JBSWY3DPEHPK3PXP"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Apenas administradores podem configurar MFA."
            }
            ```
            </remarks>
            <returns>Segredo TOTP para configuração no aplicativo autenticador.</returns>
            <exception cref="T:System.InvalidOperationException">Apenas administradores podem configurar MFA.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ValidateMfa(Hephaestus.Application.DTOs.Request.MfaRequest)">
            <summary>
            Valida um código MFA e retorna um novo token JWT com MFA validado.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Código MFA inválido."
            }
            ```
            </remarks>
            <param name="request">E-mail e código MFA.</param>
            <returns>Novo token JWT com claim MfaValidated.</returns>
            <exception cref="T:System.InvalidOperationException">Código MFA inválido ou usuário não é administrador.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.GetLoggedUser">
            <summary>
            Retorna os dados do usuário logado.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Admin",
              "email": "admin@example.com",
              "role": "Admin"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Usuário não encontrado."
            }
            ```
            </remarks>
            <returns>Dados do usuário logado (ID, nome, e-mail, função).</returns>
            <exception cref="T:System.InvalidOperationException">Usuário não autenticado ou dados inválidos.</exception>
        </member>
        <member name="T:Hephaestus.Controllers.CustomerController">
            <summary>
            Controller para gerenciamento de clientes.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.UpdateCustomer(Hephaestus.Application.DTOs.Request.CustomerRequest)">
            <summary>
            Atualiza ou cadastra dados de um cliente.
            </summary>
            <param name="request">Dados do cliente (nome, endereço, latitude, longitude).</param>
            <returns>Status da atualização ou criação.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetCustomers(System.String)">
            <summary>
            Lista clientes do tenant.
            </summary>
            <param name="phoneNumber">Número de telefone para filtrar clientes (opcional).</param>
            <returns>Lista de clientes.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetCustomerById(System.String)">
            <summary>
            Obtém detalhes de um cliente específico.
            </summary>
            <param name="id">ID do cliente (GUID).</param>
            <returns>Detalhes do cliente.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.PromotionController">
            <summary>
            Controller para gerenciamento de promoções de um tenant.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.#ctor(Hephaestus.Application.Interfaces.Promotion.ICreatePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.IGetPromotionsUseCase,Hephaestus.Application.Interfaces.Promotion.IGetPromotionByIdUseCase,Hephaestus.Application.Interfaces.Promotion.IUpdatePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.IDeletePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.INotifyPromotionUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.PromotionController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.PromotionController"/>.
            </summary>
            <param name="createPromotionUseCase">Caso de uso para criar promoções.</param>
            <param name="getPromotionsUseCase">Caso de uso para listar promoções.</param>
            <param name="getPromotionByIdUseCase">Caso de uso para obter promoção por ID.</param>
            <param name="updatePromotionUseCase">Caso de uso para atualizar promoções.</param>
            <param name="deletePromotionUseCase">Caso de uso para remover promoções.</param>
            <param name="notifyPromotionUseCase">Caso de uso para notificar promoções.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.CreatePromotion(Hephaestus.Application.DTOs.Request.CreatePromotionRequest)">
            <summary>
            Cria uma nova promoção para o tenant.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "name": "Desconto de 10%",
              "description": "10% de desconto em pedidos",
              "discountType": "Percentage",
              "discountValue": 10.00,
              "menuItemId": null,
              "minOrderValue": 50.00,
              "maxUsagePerCustomer": 1,
              "maxTotalUses": 100,
              "applicableToTags": ["pizza", "lanche"],
              "startDate": "2025-07-12T00:00:00",
              "endDate": "2025-12-31T23:59:59",
              "isActive": true,
              "imageUrl": "https://exemplo.com/imagem.jpg"
            }
            ```
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "errors": [
                {
                  "propertyName": "Name",
                  "errorMessage": "Nome é obrigatório."
                }
              ]
            }
            ```
            </remarks>
            <param name="request">Dados da promoção a ser criada.</param>
            <returns>ID da promoção criada.</returns>
            <exception cref="T:FluentValidation.ValidationException">Se os dados da requisição forem inválidos.</exception>
            <exception cref="T:System.InvalidOperationException">Se o item do cardápio não for encontrado para FreeItem.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetPromotions(System.Nullable{System.Boolean})">
            <summary>
            Lista promoções do tenant.
            </summary>
            <remarks>
            Exemplo de requisição:
            ```http
            GET /api/promotion?isActive=true
            ```
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Desconto de 10%",
                "description": "10% de desconto em pedidos",
                "discountType": "Percentage",
                "discountValue": 10.00,
                "menuItemId": null,
                "minOrderValue": 50.00,
                "maxUsagePerCustomer": 1,
                "maxTotalUses": 100,
                "applicableToTags": ["pizza", "lanche"],
                "startDate": "2025-07-12T00:00:00",
                "endDate": "2025-12-31T23:59:59",
                "isActive": true,
                "imageUrl": "https://exemplo.com/imagem.jpg"
              }
            ]
            ```
            Exemplo de erro:
            ```json
            {
              "error": "TenantId não encontrado no token."
            }
            ```
            </remarks>
            <param name="isActive">Filtro opcional para promoções ativas (true) ou inativas (false).</param>
            <returns>Lista de promoções do tenant.</returns>
            <exception cref="T:System.Exception">Erro inesperado ao listar promoções.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetPromotionById(System.String)">
            <summary>
            Obtém detalhes de uma promoção por ID.
            </summary>
            <remarks>
            Exemplo de requisição:
            ```http
            GET /api/promotion/123e4567-e89b-12d3-a456-426614174001
            ```
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "name": "Desconto de 10%",
              "description": "10% de desconto em pedidos",
              "discountType": "Percentage",
              "discountValue": 10.00,
              "menuItemId": null,
              "minOrderValue": 50.00,
              "maxUsagePerCustomer": 1,
              "maxTotalUses": 100,
              "applicableToTags": ["pizza", "lanche"],
              "startDate": "2025-07-12T00:00:00",
              "endDate": "2025-12-31T23:59:59",
              "isActive": true,
              "imageUrl": "https://exemplo.com/imagem.jpg"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da promoção (GUID).</param>
            <returns>Detalhes da promoção.</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Se a promoção não for encontrada.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.UpdatePromotion(System.String,Hephaestus.Application.DTOs.Request.UpdatePromotionRequest)">
            <summary>
            Atualiza uma promoção do tenant.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Desconto de 15%",
              "description": "15% de desconto em pedidos",
              "discountType": "Percentage",
              "discountValue": 15.00,
              "menuItemId": null,
              "minOrderValue": 60.00,
              "maxUsagePerCustomer": 2,
              "maxTotalUses": 200,
              "applicableToTags": ["pizza", "lanche"],
              "startDate": "2025-07-12T00:00:00",
              "endDate": "2025-12-31T23:59:59",
              "isActive": true,
              "imageUrl": "https://exemplo.com/imagem-atualizada.jpg"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da promoção a ser atualizada (GUID).</param>
            <param name="request">Dados atualizados da promoção.</param>
            <returns>Status de sucesso (204 No Content).</returns>
            <exception cref="T:FluentValidation.ValidationException">Se os dados da requisição forem inválidos.</exception>
            <exception cref="T:System.ArgumentException">Se o ID no corpo não corresponder ao ID na URL.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Se a promoção não for encontrada.</exception>
            <exception cref="T:System.InvalidOperationException">Se o item do cardápio não for encontrado para FreeItem.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.DeletePromotion(System.String)">
            <summary>
            Remove uma promoção do tenant.
            </summary>
            <remarks>
            Exemplo de requisição:
            ```http
            DELETE /api/promotion/123e4567-e89b-12d3-a456-426614174001
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da promoção a ser removida (GUID).</param>
            <returns>Status de sucesso (204 No Content).</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Se a promoção não for encontrada.</exception>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.NotifyPromotion(Hephaestus.Application.DTOs.Request.NotifyPromotionRequest)">
            <summary>
            Notifica uma promoção via WhatsApp.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "promotionId": "123e4567-e89b-12d3-a456-426614174001",
              "messageTemplate": "Confira nossa nova promoção: {name}!"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "errors": [
                {
                  "propertyName": "PromotionId",
                  "errorMessage": "ID da promoção é obrigatório."
                }
              ]
            }
            ```
            </remarks>
            <param name="request">Dados da notificação (ID da promoção e modelo de mensagem).</param>
            <returns>Status de sucesso (204 No Content).</returns>
            <exception cref="T:FluentValidation.ValidationException">Se os dados da requisição forem inválidos.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Se a promoção não for encontrada.</exception>
        </member>
        <member name="T:Hephaestus.Program">
            <summary>
            Configurações da aplicação principal.
            </summary>
        </member>
        <member name="M:Hephaestus.Program.Main(System.String[])">
            <summary>
            Ponto de entrada da aplicação.
            </summary>
            <param name="args">Argumentos da linha de comando.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configura os serviços no contêiner de injeção de dependência.
            </summary>
            <param name="services">Coleção de serviços.</param>
            <param name="configuration">Configuração da aplicação.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configura a autenticação JWT no contêiner de serviços.
            </summary>
            <param name="services">Coleção de serviços.</param>
            <param name="configuration">Configuração da aplicação.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configura as políticas de autorização no contêiner de serviços.
            </summary>
            <param name="services">Coleção de serviços.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configura o Swagger com suporte para autenticação Bearer e documentação XML opcional.
            </summary>
            <param name="services">Coleção de serviços.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureMiddleware(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configura o pipeline de middleware da aplicação.
            </summary>
            <param name="app">Aplicação web configurada.</param>
        </member>
    </members>
</doc>
