<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hephaestus</name>
    </assembly>
    <members>
        <member name="T:Hephaestus.Controllers.AdditionalController">
            <summary>
            Controller para gerenciamento de adicionais.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.#ctor(Hephaestus.Application.Interfaces.Additional.ICreateAdditionalUseCase,Hephaestus.Application.Interfaces.Additional.IGetAdditionalsUseCase,Hephaestus.Application.Interfaces.Additional.IGetAdditionalByIdUseCase,Hephaestus.Application.Interfaces.Additional.IUpdateAdditionalUseCase,Hephaestus.Application.Interfaces.Additional.IDeleteAdditionalUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AdditionalController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.AdditionalController"/>.
            </summary>
            <param name="createAdditionalUseCase">Caso de uso para criação de adicionais.</param>
            <param name="getAdditionalsUseCase">Caso de uso para listagem de adicionais.</param>
            <param name="getAdditionalByIdUseCase">Caso de uso para obtenção de adicional por ID.</param>
            <param name="updateAdditionalUseCase">Caso de uso para atualização de adicionais.</param>
            <param name="deleteAdditionalUseCase">Caso de uso para remoção de adicionais.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.CreateAdditional(Hephaestus.Application.DTOs.Request.CreateAdditionalRequest)">
            <summary>
            Cria um novo adicional.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            Exemplo de erro de validação:
            ```json
            {
              "error": {
                "code": "VALIDATION_ERROR",
                "message": "Erro de validação",
                "details": {
                  "errors": [
                    {
                      "field": "Name",
                      "message": "Nome é obrigatório."
                    }
                  ]
                }
              }
            }
            ```
            </remarks>
            <param name="request">Dados do adicional a ser criado.</param>
            <returns>ID do adicional criado.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.GetAdditionals">
            <summary>
            Lista adicionais do tenant.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Queijo Extra",
                "description": "Adicional de queijo",
                "price": 3.50,
                "isAvailable": true
              }
            ]
            ```
            </remarks>
            <returns>Lista de adicionais do tenant.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.GetAdditionalById(System.String)">
            <summary>
            Obtém adicional por ID.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "name": "Queijo Extra",
              "description": "Adicional de queijo",
              "price": 3.50,
              "isAvailable": true
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Adicional não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do adicional.</param>
            <returns>Detalhes do adicional.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.UpdateAdditional(System.String,Hephaestus.Application.DTOs.Request.UpdateAdditionalRequest)">
            <summary>
            Atualiza adicional.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Adicional não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do adicional.</param>
            <param name="request">Dados atualizados do adicional.</param>
            <returns>Status da atualização.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.DeleteAdditional(System.String)">
            <summary>
            Remove adicional.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Adicional não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do adicional.</param>
            <returns>Status da remoção.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdditionalController.GetTenantId">
            <summary>
            Obtém o TenantId do token de autenticação.
            </summary>
            <returns>TenantId do token.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.AdministrationController">
            <summary>
            Controller para gerenciamento administrativo de empresas, vendas e logs.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.#ctor(Hephaestus.Application.Interfaces.Administration.IGetCompaniesUseCase,Hephaestus.Application.Interfaces.Administration.IUpdateCompanyUseCase,Hephaestus.Application.Interfaces.Administration.ISalesReportUseCase,Hephaestus.Application.Interfaces.Administration.IAuditLogUseCase,Hephaestus.Application.Interfaces.Administration.IGetCompaniesWithinRadiusUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AdministrationController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.AdministrationController"/>.
            </summary>
            <param name="getCompaniesUseCase">Caso de uso para listar empresas.</param>
            <param name="updateCompanyUseCase">Caso de uso para atualizar empresas.</param>
            <param name="salesReportUseCase">Caso de uso para relatórios de vendas.</param>
            <param name="auditLogUseCase">Caso de uso para logs de auditoria.</param>
            <param name="getCompaniesWithinRadiusUseCase">Caso de uso para buscar empresas dentro de um raio.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetCompanies(System.Nullable{System.Boolean})">
            <summary>
            Lista todas as empresas.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "name": "Empresa Exemplo",
                "email": "exemplo@empresa.com",
                "phoneNumber": "123456789",
                "isEnabled": true,
                "feeType": "Percentage",
                "feeValue": 5.0,
                "city": "São Paulo",
                "neighborhood": "Vila Mariana",
                "street": "Rua Exemplo",
                "number": "123",
                "latitude": -23.550520,
                "longitude": -46.633308,
                "slogan": "O melhor da cidade!",
                "description": "Descrição da empresa."
              }
            ]
            ```
            </remarks>
            <param name="isEnabled">Filtro opcional para empresas habilitadas (true) ou desabilitadas (false).</param>
            <returns>Lista de empresas.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.UpdateCompany(System.String,Hephaestus.Application.DTOs.Request.UpdateCompanyRequest)">
            <summary>
            Atualiza configurações de uma empresa.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Empresa Atualizada",
              "email": "atualizada@empresa.com",
              "phoneNumber": "987654321",
              "apiKey": "xyz789",
              "feeType": "Percentage",
              "feeValue": 5.0,
              "isEnabled": true,
              "city": "Rio de Janeiro",
              "neighborhood": "Copacabana",
              "street": "Avenida Nova",
              "number": "456",
              "latitude": -22.906847,
              "longitude": -43.172896,
              "slogan": "Novo slogan!",
              "description": "Nova descrição."
            }
            ```
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Empresa não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da empresa a ser atualizada.</param>
            <param name="request">Dados atualizados da empresa.</param>
            <returns>Status da atualização.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetSalesReport(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String)">
            <summary>
            Relatório consolidado de vendas de todas as empresas.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "totalSales": 1000.00,
              "totalTransactions": 50,
              "averageTicket": 20.00,
              "byCompany": [
                {
                  "companyId": "123e4567-e89b-12d3-a456-426614174001",
                  "companyName": "Empresa Exemplo",
                  "totalSales": 500.00,
                  "totalTransactions": 25
                }
              ]
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Datas inválidas."
            }
            ```
            </remarks>
            <param name="startDate">Data inicial do relatório no formato ISO 8601 (ex.: 2024-01-01). Opcional.</param>
            <param name="endDate">Data final do relatório no formato ISO 8601 (ex.: 2024-12-31). Opcional.</param>
            <param name="tenantId">ID da empresa (tenant) para filtrar vendas. Opcional.</param>
            <returns>Relatório de vendas consolidado.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetAuditLogs(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Lista logs de auditoria de ações administrativas.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "userId": "456e7890-e89b-12d3-a456-426614174002",
                "action": "UpdateCompany",
                "entityId": "789e0123-e89b-12d3-a456-426614174003",
                "description": "Empresa atualizada com sucesso",
                "timestamp": "2024-01-01T12:00:00Z"
              }
            ]
            ```
            </remarks>
            <param name="adminId">ID do administrador para filtrar logs. Opcional.</param>
            <param name="startDate">Data inicial para filtrar logs. Opcional.</param>
            <param name="endDate">Data final para filtrar logs. Opcional.</param>
            <returns>Lista de logs de auditoria.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AdministrationController.GetCompaniesByRadius(System.Double,System.Double,System.Double,System.String,System.String)">
            <summary>
            Lista empresas dentro de um raio específico.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "name": "Empresa Próxima",
                "email": "proxima@empresa.com",
                "phoneNumber": "123456789",
                "isEnabled": true,
                "feeType": "Percentage",
                "feeValue": 5.0,
                "city": "São Paulo",
                "neighborhood": "Vila Mariana",
                "street": "Rua Exemplo",
                "number": "123",
                "latitude": -23.550520,
                "longitude": -46.633308,
                "slogan": "O melhor da cidade!",
                "description": "Descrição da empresa."
              }
            ]
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Coordenadas inválidas."
            }
            ```
            </remarks>
            <param name="centerLat">Latitude do centro do raio.</param>
            <param name="centerLon">Longitude do centro do raio.</param>
            <param name="radiusKm">Raio em quilômetros.</param>
            <param name="city">Filtro opcional por cidade.</param>
            <param name="neighborhood">Filtro opcional por bairro.</param>
            <returns>Lista de empresas dentro do raio.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.AuthController">
            <summary>
            Controller para autenticação e gerenciamento de usuários.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.#ctor(Hephaestus.Application.Interfaces.Auth.ILoginUseCase,Hephaestus.Application.Interfaces.Auth.IRegisterCompanyUseCase,Hephaestus.Application.Interfaces.Auth.IResetPasswordUseCase,Hephaestus.Application.Interfaces.Auth.IMfaUseCase,Hephaestus.Domain.Services.ILoggedUserService,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.AuthController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.AuthController"/>.
            </summary>
            <param name="loginUseCase">Caso de uso para login.</param>
            <param name="registerCompanyUseCase">Caso de uso para registro de empresas.</param>
            <param name="resetPasswordUseCase">Caso de uso para redefinição de senha.</param>
            <param name="mfaUseCase">Caso de uso para autenticação multifator (MFA).</param>
            <param name="loggedUserService">Serviço para obter informações do usuário logado.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.Login(Hephaestus.Application.DTOs.Request.LoginRequest,System.String)">
            <summary>
            Autentica um usuário e retorna um token JWT.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Credenciais inválidas."
            }
            ```
            </remarks>
            <param name="request">Dados de login (e-mail e senha).</param>
            <param name="mfaCode">Código MFA opcional para administradores.</param>
            <returns>Token JWT.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.Register(Hephaestus.Application.DTOs.Request.RegisterCompanyRequest)">
            <summary>
            Registra uma nova empresa (apenas administradores com MFA validado).
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "companyId": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "E-mail já registrado."
            }
            ```
            </remarks>
            <param name="request">Dados da empresa a ser registrada.</param>
            <returns>ID da empresa registrada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ResetPasswordRequest(Hephaestus.Application.DTOs.Request.ResetPasswordRequest)">
            <summary>
            Solicita um token para redefinição de senha.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "token": "ABC123"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "E-mail não encontrado."
            }
            ```
            </remarks>
            <param name="request">E-mail do usuário.</param>
            <returns>Token de redefinição de senha.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ResetPassword(Hephaestus.Application.DTOs.Request.ResetPasswordConfirmRequest)">
            <summary>
            Confirma a redefinição de senha com um token.
            </summary>
            <remarks>
            Exemplo de erro:
            ```json
            {
              "error": "Token inválido ou expirado."
            }
            ```
            </remarks>
            <param name="request">E-mail, token e nova senha.</param>
            <returns>Status de sucesso.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.SetupMfa">
            <summary>
            Configura a autenticação multifator (MFA) para um administrador.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "secret": "JBSWY3DPEHPK3PXP"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Apenas administradores podem configurar MFA."
            }
            ```
            </remarks>
            <returns>Segredo TOTP para configuração no aplicativo autenticador.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.ValidateMfa(Hephaestus.Application.DTOs.Request.MfaRequest)">
            <summary>
            Valida um código MFA e retorna um novo token JWT com MFA validado.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Código MFA inválido."
            }
            ```
            </remarks>
            <param name="request">E-mail e código MFA.</param>
            <returns>Novo token JWT com claim MfaValidated.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.GetLoggedUser">
            <summary>
            Retorna os dados do usuário logado.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Admin",
              "email": "admin@example.com",
              "role": "Admin"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Usuário não encontrado."
            }
            ```
            </remarks>
            <returns>Dados do usuário logado (ID, nome, e-mail, função).</returns>
        </member>
        <member name="M:Hephaestus.Controllers.AuthController.GetUserEmail">
            <summary>
            Obtém o e-mail do usuário do token de autenticação.
            </summary>
            <returns>E-mail do usuário.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.CompanyController">
            <summary>
            Controller para gerenciamento de perfis de empresas.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CompanyController.#ctor(Hephaestus.Application.Interfaces.Company.IGetCompanyProfileUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.CompanyController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.CompanyController"/>.
            </summary>
            <param name="getCompanyProfileUseCase">Caso de uso para obtenção de perfil da empresa.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.CompanyController.GetCompanyProfile(System.String)">
            <summary>
            Obtém o perfil completo de uma empresa.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "name": "Restaurante Exemplo",
              "email": "contato@restaurante.com",
              "phoneNumber": "11987654321",
              "isEnabled": true,
              "feeType": "Percentage",
              "feeValue": 5.0,
              "state": "SP",
              "city": "São Paulo",
              "neighborhood": "Centro",
              "street": "Rua das Flores",
              "number": "123",
              "latitude": -23.5505,
              "longitude": -46.6333,
              "slogan": "A melhor comida da cidade!",
              "description": "Restaurante especializado em pratos tradicionais.",
              "images": [
                {
                  "id": "img1",
                  "url": "https://example.com/image1.jpg",
                  "description": "Fachada do restaurante"
                }
              ],
              "operatingHours": [
                {
                  "dayOfWeek": 1,
                  "openTime": "08:00",
                  "closeTime": "22:00",
                  "isOpen": true
                }
              ],
              "socialMedia": [
                {
                  "platform": "Instagram",
                  "url": "https://instagram.com/restaurante"
                }
              ]
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Empresa não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da empresa.</param>
            <returns>Perfil completo da empresa.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.CustomerController">
            <summary>
            Controller para gerenciamento de clientes.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.#ctor(Hephaestus.Application.Interfaces.Customer.IUpdateCustomerUseCase,Hephaestus.Application.Interfaces.Customer.IGetCustomerUseCase,Hephaestus.Application.Interfaces.Customer.IGetByIdCustomerUseCase,Hephaestus.Application.Interfaces.Administration.IAuditLogUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.CustomerController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.CustomerController"/>.
            </summary>
            <param name="updateCustomerUseCase">Caso de uso para atualização de clientes.</param>
            <param name="getCustomerUseCase">Caso de uso para listagem de clientes.</param>
            <param name="getByIdCustomerUseCase">Caso de uso para obtenção de cliente por ID.</param>
            <param name="auditLogUseCase">Caso de uso para logs de auditoria.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.UpdateCustomer(Hephaestus.Application.DTOs.Request.CustomerRequest)">
            <summary>
            Atualiza ou cadastra dados de um cliente.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "TenantId não encontrado no token."
            }
            ```
            </remarks>
            <param name="request">Dados do cliente (nome, endereço, latitude, longitude).</param>
            <returns>Status da atualização ou criação.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetCustomers(System.String)">
            <summary>
            Lista clientes do tenant.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "phoneNumber": "11987654321",
                "name": "João Silva",
                "state": "SP",
                "city": "São Paulo",
                "street": "Rua das Flores",
                "number": "123",
                "latitude": -23.5505,
                "longitude": -46.6333,
                "createdAt": "2024-01-01T12:00:00Z"
              }
            ]
            ```
            </remarks>
            <param name="phoneNumber">Número de telefone para filtrar clientes (opcional).</param>
            <returns>Lista de clientes.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetCustomerById(System.String)">
            <summary>
            Obtém detalhes de um cliente específico.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "phoneNumber": "11987654321",
              "name": "João Silva",
              "state": "SP",
              "city": "São Paulo",
              "street": "Rua das Flores",
              "number": "123",
              "latitude": -23.5505,
              "longitude": -46.6333,
              "createdAt": "2024-01-01T12:00:00Z"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Cliente não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do cliente (GUID).</param>
            <returns>Detalhes do cliente.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.CustomerController.GetTenantId">
            <summary>
            Obtém o TenantId do token de autenticação.
            </summary>
            <returns>TenantId do token.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.DatabaseController">
            <summary>
            Controller para operações de banco de dados.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.DatabaseController.#ctor(Hephaestus.Application.Interfaces.Database.IExecuteQueryUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.DatabaseController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.DatabaseController"/>.
            </summary>
            <param name="executeQueryUseCase">Caso de uso para execução de queries.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.DatabaseController.ExecuteQuery(Hephaestus.Application.DTOs.Request.ExecuteQueryRequest)">
            <summary>
            Executa uma query SQL de consulta.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "columns": ["id", "name", "email"],
              "rows": [
                ["1", "João Silva", "joao@email.com"],
                ["2", "Maria Santos", "maria@email.com"]
              ],
              "rowCount": 2
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Query inválida. Apenas comandos SELECT são permitidos."
            }
            ```
            </remarks>
            <param name="request">Query SQL a ser executada.</param>
            <returns>Resultados da query.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.MenuController">
            <summary>
            Controller para gerenciamento de itens do cardápio.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.#ctor(Hephaestus.Application.Interfaces.Menu.ICreateMenuItemUseCase,Hephaestus.Application.Interfaces.Menu.IGetMenuItemsUseCase,Hephaestus.Application.Interfaces.Menu.IGetMenuItemByIdUseCase,Hephaestus.Application.Interfaces.Menu.IUpdateMenuItemUseCase,Hephaestus.Application.Interfaces.Menu.IDeleteMenuItemUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.MenuController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.MenuController"/>.
            </summary>
            <param name="createMenuItemUseCase">Caso de uso para criação de itens do cardápio.</param>
            <param name="getMenuItemsUseCase">Caso de uso para listagem de itens do cardápio.</param>
            <param name="getMenuItemByIdUseCase">Caso de uso para obtenção de item do cardápio por ID.</param>
            <param name="updateMenuItemUseCase">Caso de uso para atualização de itens do cardápio.</param>
            <param name="deleteMenuItemUseCase">Caso de uso para remoção de itens do cardápio.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.CreateMenuItem(Hephaestus.Application.DTOs.Request.CreateMenuItemRequest)">
            <summary>
            Cria um novo item do cardápio.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            Exemplo de erro de validação:
            ```json
            {
              "error": {
                "code": "VALIDATION_ERROR",
                "message": "Erro de validação",
                "details": {
                  "errors": [
                    {
                      "field": "Name",
                      "message": "Nome é obrigatório."
                    }
                  ]
                }
              }
            }
            ```
            </remarks>
            <param name="request">Dados do item do cardápio a ser criado.</param>
            <returns>ID do item criado.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.GetMenuItems">
            <summary>
            Lista itens do cardápio.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "X-Burger",
                "description": "Hambúrguer com queijo e salada",
                "categoryId": "789e0123-e89b-12d3-a456-426614174003",
                "price": 25.90,
                "isAvailable": true,
                "tagIds": ["tag1", "tag2"],
                "availableAdditionalIds": ["add1", "add2"],
                "imageUrl": "https://example.com/burger.jpg"
              }
            ]
            ```
            </remarks>
            <returns>Lista de itens do cardápio.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.GetMenuItemById(System.String)">
            <summary>
            Obtém item do cardápio por ID.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "name": "X-Burger",
              "description": "Hambúrguer com queijo e salada",
              "categoryId": "789e0123-e89b-12d3-a456-426614174003",
              "price": 25.90,
              "isAvailable": true,
              "tagIds": ["tag1", "tag2"],
              "availableAdditionalIds": ["add1", "add2"],
              "imageUrl": "https://example.com/burger.jpg"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Item do cardápio não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do item do cardápio.</param>
            <returns>Detalhes do item do cardápio.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.UpdateMenuItem(System.String,Hephaestus.Application.DTOs.Request.UpdateMenuItemRequest)">
            <summary>
            Atualiza item do cardápio.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Item do cardápio não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do item do cardápio.</param>
            <param name="request">Dados atualizados do item do cardápio.</param>
            <returns>Status da atualização.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.DeleteMenuItem(System.String)">
            <summary>
            Remove item do cardápio.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Item do cardápio não encontrado."
            }
            ```
            </remarks>
            <param name="id">ID do item do cardápio.</param>
            <returns>Status da remoção.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.MenuController.GetTenantId">
            <summary>
            Obtém o TenantId do token de autenticação.
            </summary>
            <returns>TenantId do token.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.MenuControllerSimplified">
            <summary>
            Controller simplificado para gerenciamento de cardápio com tratamento de exceções centralizado.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuControllerSimplified.CreateMenuItem(Hephaestus.Application.DTOs.Request.CreateMenuItemRequest)">
            <summary>
            Cria um novo item do cardápio.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuControllerSimplified.GetMenuItems">
            <summary>
            Lista itens do cardápio.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuControllerSimplified.GetMenuItemById(System.String)">
            <summary>
            Obtém item do cardápio por ID.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuControllerSimplified.UpdateMenuItem(System.String,Hephaestus.Application.DTOs.Request.UpdateMenuItemRequest)">
            <summary>
            Atualiza item do cardápio.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuControllerSimplified.DeleteMenuItem(System.String)">
            <summary>
            Remove item do cardápio.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.MenuControllerSimplified.GetTenantId">
            <summary>
            Obtém o TenantId do token de autenticação.
            </summary>
            <returns>TenantId do token.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.OpenAIController">
            <summary>
            Controller para integração com a API da OpenAI.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.OpenAIController.#ctor(Hephaestus.Application.Interfaces.OpenAI.IChatWithOpenAIUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.OpenAIController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.OpenAIController"/>.
            </summary>
            <param name="chatWithOpenAIUseCase">Caso de uso para comunicação com a OpenAI.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.OpenAIController.Chat(Hephaestus.Application.DTOs.Request.OpenAIRequest)">
            <summary>
            Consulta o chat da OpenAI.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "response": "Olá! Como posso ajudá-lo hoje?",
              "usage": {
                "promptTokens": 10,
                "completionTokens": 15,
                "totalTokens": 25
              }
            }
            ```
            Exemplo de erro de validação:
            ```json
            {
              "error": {
                "code": "VALIDATION_ERROR",
                "message": "Erro de validação",
                "details": {
                  "errors": [
                    {
                      "field": "Prompt",
                      "message": "Prompt é obrigatório."
                    }
                  ]
                }
              }
            }
            ```
            </remarks>
            <param name="request">Dados da consulta à OpenAI.</param>
            <returns>Resposta da OpenAI.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.PromotionController">
            <summary>
            Controller para gerenciamento de promoções de um tenant.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.#ctor(Hephaestus.Application.Interfaces.Promotion.ICreatePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.IGetPromotionsUseCase,Hephaestus.Application.Interfaces.Promotion.IGetPromotionByIdUseCase,Hephaestus.Application.Interfaces.Promotion.IUpdatePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.IDeletePromotionUseCase,Hephaestus.Application.Interfaces.Promotion.INotifyPromotionUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.PromotionController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.PromotionController"/>.
            </summary>
            <param name="createPromotionUseCase">Caso de uso para criar promoções.</param>
            <param name="getPromotionsUseCase">Caso de uso para listar promoções.</param>
            <param name="getPromotionByIdUseCase">Caso de uso para obter promoção por ID.</param>
            <param name="updatePromotionUseCase">Caso de uso para atualizar promoções.</param>
            <param name="deletePromotionUseCase">Caso de uso para remover promoções.</param>
            <param name="notifyPromotionUseCase">Caso de uso para notificar promoções.</param>
            <param name="logger">Logger para registro de erros.</param>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.CreatePromotion(Hephaestus.Application.DTOs.Request.CreatePromotionRequest)">
            <summary>
            Cria uma nova promoção para o tenant.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "name": "Desconto de 10%",
              "description": "10% de desconto em pedidos",
              "discountType": "Percentage",
              "discountValue": 10.00,
              "menuItemId": null,
              "minOrderValue": 50.00,
              "maxUsagePerCustomer": 1,
              "maxTotalUses": 100,
              "applicableToTags": ["pizza", "lanche"],
              "startDate": "2025-07-12T00:00:00",
              "endDate": "2025-12-31T23:59:59",
              "isActive": true,
              "imageUrl": "https://exemplo.com/imagem.jpg"
            }
            ```
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001"
            }
            ```
            Exemplo de erro de validação:
            ```json
            {
              "error": {
                "code": "VALIDATION_ERROR",
                "message": "Erro de validação",
                "details": {
                  "errors": [
                    {
                      "field": "Name",
                      "message": "Nome é obrigatório."
                    }
                  ]
                }
              }
            }
            ```
            </remarks>
            <param name="request">Dados da promoção a ser criada.</param>
            <returns>ID da promoção criada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetPromotions(System.Nullable{System.Boolean})">
            <summary>
            Lista promoções do tenant.
            </summary>
            <remarks>
            Exemplo de requisição:
            ```http
            GET /api/promotion?isActive=true
            ```
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Desconto de 10%",
                "description": "10% de desconto em pedidos",
                "discountType": "Percentage",
                "discountValue": 10.00,
                "menuItemId": null,
                "minOrderValue": 50.00,
                "maxUsagePerCustomer": 1,
                "maxTotalUses": 100,
                "applicableToTags": ["pizza", "lanche"],
                "startDate": "2025-07-12T00:00:00",
                "endDate": "2025-12-31T23:59:59",
                "isActive": true,
                "imageUrl": "https://exemplo.com/imagem.jpg"
              }
            ]
            ```
            </remarks>
            <param name="isActive">Filtro opcional para promoções ativas (true) ou inativas (false).</param>
            <returns>Lista de promoções do tenant.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetPromotionById(System.String)">
            <summary>
            Obtém detalhes de uma promoção por ID.
            </summary>
            <remarks>
            Exemplo de requisição:
            ```http
            GET /api/promotion/123e4567-e89b-12d3-a456-426614174001
            ```
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "name": "Desconto de 10%",
              "description": "10% de desconto em pedidos",
              "discountType": "Percentage",
              "discountValue": 10.00,
              "menuItemId": null,
              "minOrderValue": 50.00,
              "maxUsagePerCustomer": 1,
              "maxTotalUses": 100,
              "applicableToTags": ["pizza", "lanche"],
              "startDate": "2025-07-12T00:00:00",
              "endDate": "2025-12-31T23:59:59",
              "isActive": true,
              "imageUrl": "https://exemplo.com/imagem.jpg"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da promoção (GUID).</param>
            <returns>Detalhes da promoção.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.UpdatePromotion(System.String,Hephaestus.Application.DTOs.Request.UpdatePromotionRequest)">
            <summary>
            Atualiza uma promoção do tenant.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "name": "Desconto de 15%",
              "description": "15% de desconto em pedidos",
              "discountType": "Percentage",
              "discountValue": 15.00,
              "menuItemId": null,
              "minOrderValue": 60.00,
              "maxUsagePerCustomer": 2,
              "maxTotalUses": 200,
              "applicableToTags": ["pizza", "lanche"],
              "startDate": "2025-07-12T00:00:00",
              "endDate": "2025-12-31T23:59:59",
              "isActive": true,
              "imageUrl": "https://exemplo.com/imagem.jpg"
            }
            ```
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da promoção a ser atualizada.</param>
            <param name="request">Dados atualizados da promoção.</param>
            <returns>Status da atualização.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.DeletePromotion(System.String)">
            <summary>
            Remove uma promoção do tenant.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da promoção a ser removida.</param>
            <returns>Status da remoção.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.NotifyPromotion(Hephaestus.Application.DTOs.Request.NotifyPromotionRequest)">
            <summary>
            Notifica uma promoção via WhatsApp.
            </summary>
            <remarks>
            Exemplo de corpo da requisição:
            ```json
            {
              "promotionId": "123e4567-e89b-12d3-a456-426614174001",
              "phoneNumbers": ["11987654321", "11987654322"],
              "message": "Promoção especial para você!"
            }
            ```
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Promoção não encontrada."
            }
            ```
            </remarks>
            <param name="request">Dados da notificação.</param>
            <returns>Status da notificação.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.PromotionController.GetTenantId">
            <summary>
            Obtém o TenantId do token de autenticação.
            </summary>
            <returns>TenantId do token.</returns>
        </member>
        <member name="T:Hephaestus.Controllers.TagController">
            <summary>
            Controller para gerenciamento de tags.
            </summary>
        </member>
        <member name="M:Hephaestus.Controllers.TagController.#ctor(Hephaestus.Application.Interfaces.Tag.ICreateTagUseCase,Hephaestus.Application.Interfaces.Tag.IGetAllTagsByTenantUseCase,Hephaestus.Application.Interfaces.Tag.IDeleteTagUseCase,Microsoft.Extensions.Logging.ILogger{Hephaestus.Controllers.TagController})">
            <summary>
            Inicializa uma nova instância do <see cref="T:Hephaestus.Controllers.TagController"/>.
            </summary>
            <param name="createTagUseCase">Caso de uso para criação de tags.</param>
            <param name="getAllTagsByTenantUseCase">Caso de uso para listagem de tags por tenant.</param>
            <param name="deleteTagUseCase">Caso de uso para remoção de tags.</param>
            <param name="logger">Logger para registro de eventos.</param>
        </member>
        <member name="M:Hephaestus.Controllers.TagController.CreateTag(Hephaestus.Application.DTOs.Request.TagRequest)">
            <summary>
            Cria uma nova tag.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            {
              "id": "123e4567-e89b-12d3-a456-426614174001",
              "tenantId": "456e7890-e89b-12d3-a456-426614174002",
              "name": "Vegetariano"
            }
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Tag já registrada para este tenant."
            }
            ```
            </remarks>
            <param name="request">Dados da tag a ser criada.</param>
            <returns>Tag criada.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.TagController.GetAllTagsByTenant(System.String)">
            <summary>
            Lista todas as tags de um tenant.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```json
            [
              {
                "id": "123e4567-e89b-12d3-a456-426614174001",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Vegetariano"
              },
              {
                "id": "789e0123-e89b-12d3-a456-426614174003",
                "tenantId": "456e7890-e89b-12d3-a456-426614174002",
                "name": "Sem Glúten"
              }
            ]
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Tenants só podem listar suas próprias tags."
            }
            ```
            </remarks>
            <param name="tenantId">ID do tenant para listar as tags.</param>
            <returns>Lista de tags do tenant.</returns>
        </member>
        <member name="M:Hephaestus.Controllers.TagController.DeleteTag(System.String)">
            <summary>
            Exclui uma tag.
            </summary>
            <remarks>
            Exemplo de resposta de sucesso:
            ```
            Status: 204 No Content
            ```
            Exemplo de erro:
            ```json
            {
              "error": "Tag não encontrada."
            }
            ```
            </remarks>
            <param name="id">ID da tag a ser excluída.</param>
            <returns>Status da exclusão.</returns>
        </member>
        <member name="T:Hephaestus.Middleware.GlobalExceptionHandlingMiddleware">
            <summary>
            Middleware para tratamento global de exceções.
            </summary>
        </member>
        <member name="M:Hephaestus.Middleware.GlobalExceptionHandlingMiddleware.InvokeAsync(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Processa a requisição e trata exceções globalmente.
            </summary>
            <param name="context">Contexto da requisição HTTP.</param>
        </member>
        <member name="M:Hephaestus.Middleware.GlobalExceptionHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception)">
            <summary>
            Trata uma exceção e retorna uma resposta HTTP apropriada.
            </summary>
            <param name="context">Contexto da requisição HTTP.</param>
            <param name="exception">Exceção a ser tratada.</param>
        </member>
        <member name="T:Hephaestus.Program">
            <summary>
            Configura��es da aplica��o principal.
            </summary>
        </member>
        <member name="M:Hephaestus.Program.Main(System.String[])">
            <summary>
            Ponto de entrada da aplica��o.
            </summary>
            <param name="args">Argumentos da linha de comando.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configura os servi�os no cont�iner de inje��o de depend�ncia.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
            <param name="configuration">Configura��o da aplica��o.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureJwtAuthentication(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Configura a autentica��o JWT no cont�iner de servi�os.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
            <param name="configuration">Configura��o da aplica��o.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureAuthorizationPolicies(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configura as pol�ticas de autoriza��o no cont�iner de servi�os.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureSwagger(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configura o Swagger com suporte para autentica��o Bearer e documenta��o XML opcional.
            </summary>
            <param name="services">Cole��o de servi�os.</param>
        </member>
        <member name="M:Hephaestus.Program.ConfigureMiddleware(Microsoft.AspNetCore.Builder.WebApplication)">
            <summary>
            Configura o pipeline de middleware da aplica��o.
            </summary>
            <param name="app">Aplica��o web configurada.</param>
        </member>
    </members>
</doc>
